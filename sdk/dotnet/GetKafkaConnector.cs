// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Upstash
{
    public static class GetKafkaConnector
    {
        /// <summary>
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Upstash = Pulumi.Upstash;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var kafkaConnectorData = Output.Create(Upstash.GetKafkaConnector.InvokeAsync(new Upstash.GetKafkaConnectorArgs
        ///         {
        ///             TopicId = resource.Upstash_kafka_connector.ExampleKafkaConnector.Connector_id,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetKafkaConnectorResult> InvokeAsync(GetKafkaConnectorArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetKafkaConnectorResult>("upstash:index/getKafkaConnector:getKafkaConnector", args ?? new GetKafkaConnectorArgs(), options.WithDefaults());

        /// <summary>
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Upstash = Pulumi.Upstash;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var kafkaConnectorData = Output.Create(Upstash.GetKafkaConnector.InvokeAsync(new Upstash.GetKafkaConnectorArgs
        ///         {
        ///             TopicId = resource.Upstash_kafka_connector.ExampleKafkaConnector.Connector_id,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetKafkaConnectorResult> Invoke(GetKafkaConnectorInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetKafkaConnectorResult>("upstash:index/getKafkaConnector:getKafkaConnector", args ?? new GetKafkaConnectorInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetKafkaConnectorArgs : Pulumi.InvokeArgs
    {
        [Input("connectorId", required: true)]
        public string ConnectorId { get; set; } = null!;

        public GetKafkaConnectorArgs()
        {
        }
    }

    public sealed class GetKafkaConnectorInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("connectorId", required: true)]
        public Input<string> ConnectorId { get; set; } = null!;

        public GetKafkaConnectorInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetKafkaConnectorResult
    {
        public readonly string ClusterId;
        public readonly string ConnectorClass;
        public readonly string ConnectorId;
        public readonly string ConnectorState;
        public readonly int CreationTime;
        public readonly string EncodedUsername;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Name;
        public readonly ImmutableDictionary<string, object> Properties;
        public readonly string PropertiesEncrypted;
        public readonly string State;
        public readonly string StateErrorMessage;
        public readonly ImmutableArray<ImmutableDictionary<string, object>> Tasks;
        public readonly ImmutableArray<string> Topics;
        public readonly int Ttl;
        public readonly string UserPassword;

        [OutputConstructor]
        private GetKafkaConnectorResult(
            string clusterId,

            string connectorClass,

            string connectorId,

            string connectorState,

            int creationTime,

            string encodedUsername,

            string id,

            string name,

            ImmutableDictionary<string, object> properties,

            string propertiesEncrypted,

            string state,

            string stateErrorMessage,

            ImmutableArray<ImmutableDictionary<string, object>> tasks,

            ImmutableArray<string> topics,

            int ttl,

            string userPassword)
        {
            ClusterId = clusterId;
            ConnectorClass = connectorClass;
            ConnectorId = connectorId;
            ConnectorState = connectorState;
            CreationTime = creationTime;
            EncodedUsername = encodedUsername;
            Id = id;
            Name = name;
            Properties = properties;
            PropertiesEncrypted = propertiesEncrypted;
            State = state;
            StateErrorMessage = stateErrorMessage;
            Tasks = tasks;
            Topics = topics;
            Ttl = ttl;
            UserPassword = userPassword;
        }
    }
}
