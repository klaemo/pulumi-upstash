// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Upstash
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Upstash = Pulumi.Upstash;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var exampleKafkaCluster = new Upstash.KafkaCluster("exampleKafkaCluster", new Upstash.KafkaClusterArgs
    ///         {
    ///             ClusterName = @var.Cluster_name,
    ///             Region = @var.Region,
    ///             Multizone = @var.Multizone,
    ///         });
    ///         var exampleKafkaTopic = new Upstash.KafkaTopic("exampleKafkaTopic", new Upstash.KafkaTopicArgs
    ///         {
    ///             TopicName = @var.Topic_name,
    ///             Partitions = @var.Partitions,
    ///             RetentionTime = @var.Retention_time,
    ///             RetentionSize = @var.Retention_size,
    ///             MaxMessageSize = @var.Max_message_size,
    ///             CleanupPolicy = @var.Cleanup_policy,
    ///             ClusterId = resource.Upstash_kafka_cluster.ExampleKafkaCluster.Cluster_id,
    ///         });
    ///         var exampleKafkaCredential = new Upstash.KafkaCredential("exampleKafkaCredential", new Upstash.KafkaCredentialArgs
    ///         {
    ///             ClusterId = exampleKafkaCluster.ClusterId,
    ///             CredentialName = "credentialFromTerraform",
    ///             Topic = exampleKafkaTopic.TopicName,
    ///             Permissions = "ALL",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// </summary>
    [UpstashResourceType("upstash:index/kafkaCredential:KafkaCredential")]
    public partial class KafkaCredential : Pulumi.CustomResource
    {
        /// <summary>
        /// ID of the kafka cluster
        /// </summary>
        [Output("clusterId")]
        public Output<string> ClusterId { get; private set; } = null!;

        /// <summary>
        /// Creation time of the credential
        /// </summary>
        [Output("creationTime")]
        public Output<int> CreationTime { get; private set; } = null!;

        /// <summary>
        /// Unique ID of the kafka credential
        /// </summary>
        [Output("credentialId")]
        public Output<string> CredentialId { get; private set; } = null!;

        /// <summary>
        /// Name of the kafka credential
        /// </summary>
        [Output("credentialName")]
        public Output<string> CredentialName { get; private set; } = null!;

        /// <summary>
        /// Password to be used in authenticating to the cluster
        /// </summary>
        [Output("password")]
        public Output<string> Password { get; private set; } = null!;

        /// <summary>
        /// Permission scope given to the kafka credential
        /// </summary>
        [Output("permissions")]
        public Output<string> Permissions { get; private set; } = null!;

        /// <summary>
        /// State of the credential(active or deleted)
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Name of the kafka topic
        /// </summary>
        [Output("topic")]
        public Output<string> Topic { get; private set; } = null!;

        /// <summary>
        /// Username to be used for the kafka credential
        /// </summary>
        [Output("username")]
        public Output<string> Username { get; private set; } = null!;


        /// <summary>
        /// Create a KafkaCredential resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public KafkaCredential(string name, KafkaCredentialArgs args, CustomResourceOptions? options = null)
            : base("upstash:index/kafkaCredential:KafkaCredential", name, args ?? new KafkaCredentialArgs(), MakeResourceOptions(options, ""))
        {
        }

        private KafkaCredential(string name, Input<string> id, KafkaCredentialState? state = null, CustomResourceOptions? options = null)
            : base("upstash:index/kafkaCredential:KafkaCredential", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/upstash/pulumi-upstash/releases/download/v${VERSION}",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing KafkaCredential resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static KafkaCredential Get(string name, Input<string> id, KafkaCredentialState? state = null, CustomResourceOptions? options = null)
        {
            return new KafkaCredential(name, id, state, options);
        }
    }

    public sealed class KafkaCredentialArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// ID of the kafka cluster
        /// </summary>
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        /// <summary>
        /// Name of the kafka credential
        /// </summary>
        [Input("credentialName", required: true)]
        public Input<string> CredentialName { get; set; } = null!;

        /// <summary>
        /// Permission scope given to the kafka credential
        /// </summary>
        [Input("permissions", required: true)]
        public Input<string> Permissions { get; set; } = null!;

        /// <summary>
        /// Name of the kafka topic
        /// </summary>
        [Input("topic", required: true)]
        public Input<string> Topic { get; set; } = null!;

        public KafkaCredentialArgs()
        {
        }
    }

    public sealed class KafkaCredentialState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// ID of the kafka cluster
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        /// <summary>
        /// Creation time of the credential
        /// </summary>
        [Input("creationTime")]
        public Input<int>? CreationTime { get; set; }

        /// <summary>
        /// Unique ID of the kafka credential
        /// </summary>
        [Input("credentialId")]
        public Input<string>? CredentialId { get; set; }

        /// <summary>
        /// Name of the kafka credential
        /// </summary>
        [Input("credentialName")]
        public Input<string>? CredentialName { get; set; }

        /// <summary>
        /// Password to be used in authenticating to the cluster
        /// </summary>
        [Input("password")]
        public Input<string>? Password { get; set; }

        /// <summary>
        /// Permission scope given to the kafka credential
        /// </summary>
        [Input("permissions")]
        public Input<string>? Permissions { get; set; }

        /// <summary>
        /// State of the credential(active or deleted)
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// Name of the kafka topic
        /// </summary>
        [Input("topic")]
        public Input<string>? Topic { get; set; }

        /// <summary>
        /// Username to be used for the kafka credential
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public KafkaCredentialState()
        {
        }
    }
}
