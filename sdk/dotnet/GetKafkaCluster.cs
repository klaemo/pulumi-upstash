// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Upstash.Upstash
{
    public static class GetKafkaCluster
    {
        /// <summary>
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Upstash = Pulumi.Upstash;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var clusterData = Output.Create(Upstash.GetKafkaCluster.InvokeAsync(new Upstash.GetKafkaClusterArgs
        ///         {
        ///             ClusterId = resource.Upstash_kafka_cluster.ExampleCluster.Cluster_id,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetKafkaClusterResult> InvokeAsync(GetKafkaClusterArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetKafkaClusterResult>("upstash:index/getKafkaCluster:getKafkaCluster", args ?? new GetKafkaClusterArgs(), options.WithDefaults());

        /// <summary>
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Upstash = Pulumi.Upstash;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var clusterData = Output.Create(Upstash.GetKafkaCluster.InvokeAsync(new Upstash.GetKafkaClusterArgs
        ///         {
        ///             ClusterId = resource.Upstash_kafka_cluster.ExampleCluster.Cluster_id,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetKafkaClusterResult> Invoke(GetKafkaClusterInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetKafkaClusterResult>("upstash:index/getKafkaCluster:getKafkaCluster", args ?? new GetKafkaClusterInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetKafkaClusterArgs : Pulumi.InvokeArgs
    {
        [Input("clusterId", required: true)]
        public string ClusterId { get; set; } = null!;

        public GetKafkaClusterArgs()
        {
        }
    }

    public sealed class GetKafkaClusterInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        public GetKafkaClusterInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetKafkaClusterResult
    {
        public readonly string ClusterId;
        public readonly string ClusterName;
        public readonly int CreationTime;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly int MaxMessageSize;
        public readonly int MaxMessagesPerSecond;
        public readonly int MaxPartitions;
        public readonly int MaxRetentionSize;
        public readonly int MaxRetentionTime;
        public readonly bool Multizone;
        public readonly string Password;
        public readonly string Region;
        public readonly string RestEndpoint;
        public readonly string State;
        public readonly string TcpEndpoint;
        public readonly string Type;
        public readonly string Username;

        [OutputConstructor]
        private GetKafkaClusterResult(
            string clusterId,

            string clusterName,

            int creationTime,

            string id,

            int maxMessageSize,

            int maxMessagesPerSecond,

            int maxPartitions,

            int maxRetentionSize,

            int maxRetentionTime,

            bool multizone,

            string password,

            string region,

            string restEndpoint,

            string state,

            string tcpEndpoint,

            string type,

            string username)
        {
            ClusterId = clusterId;
            ClusterName = clusterName;
            CreationTime = creationTime;
            Id = id;
            MaxMessageSize = maxMessageSize;
            MaxMessagesPerSecond = maxMessagesPerSecond;
            MaxPartitions = maxPartitions;
            MaxRetentionSize = maxRetentionSize;
            MaxRetentionTime = maxRetentionTime;
            Multizone = multizone;
            Password = password;
            Region = region;
            RestEndpoint = restEndpoint;
            State = state;
            TcpEndpoint = tcpEndpoint;
            Type = type;
            Username = username;
        }
    }
}
