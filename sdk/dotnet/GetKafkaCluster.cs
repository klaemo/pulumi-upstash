// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Upstash.Upstash
{
    public static class GetKafkaCluster
    {
        /// <summary>
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Upstash = Pulumi.Upstash;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var clusterData = Output.Create(Upstash.GetKafkaCluster.InvokeAsync(new Upstash.GetKafkaClusterArgs
        ///         {
        ///             ClusterId = resource.Upstash_kafka_cluster.ExampleCluster.Cluster_id,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetKafkaClusterResult> InvokeAsync(GetKafkaClusterArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetKafkaClusterResult>("upstash:index/getKafkaCluster:getKafkaCluster", args ?? new GetKafkaClusterArgs(), options.WithDefaults());

        /// <summary>
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Upstash = Pulumi.Upstash;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var clusterData = Output.Create(Upstash.GetKafkaCluster.InvokeAsync(new Upstash.GetKafkaClusterArgs
        ///         {
        ///             ClusterId = resource.Upstash_kafka_cluster.ExampleCluster.Cluster_id,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetKafkaClusterResult> Invoke(GetKafkaClusterInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetKafkaClusterResult>("upstash:index/getKafkaCluster:getKafkaCluster", args ?? new GetKafkaClusterInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetKafkaClusterArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique Cluster ID for requested cluster
        /// </summary>
        [Input("clusterId", required: true)]
        public string ClusterId { get; set; } = null!;

        public GetKafkaClusterArgs()
        {
        }
    }

    public sealed class GetKafkaClusterInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique Cluster ID for requested cluster
        /// </summary>
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        public GetKafkaClusterInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetKafkaClusterResult
    {
        /// <summary>
        /// Unique Cluster ID for requested cluster
        /// </summary>
        public readonly string ClusterId;
        /// <summary>
        /// Name of the team
        /// </summary>
        public readonly string ClusterName;
        public readonly int CreationTime;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Max Message Size for the cluster
        /// </summary>
        public readonly int MaxMessageSize;
        /// <summary>
        /// Max Messages Per Second for the cluster
        /// </summary>
        public readonly int MaxMessagesPerSecond;
        /// <summary>
        /// Max Partitions for the cluster
        /// </summary>
        public readonly int MaxPartitions;
        /// <summary>
        /// Max Retention Size of the cluster
        /// </summary>
        public readonly int MaxRetentionSize;
        /// <summary>
        /// Max Retention Time of the cluster
        /// </summary>
        public readonly int MaxRetentionTime;
        /// <summary>
        /// Whether multizone replication is enabled
        /// </summary>
        public readonly bool Multizone;
        /// <summary>
        /// Password for the cluster
        /// </summary>
        public readonly string Password;
        /// <summary>
        /// Region of the cluster. Possible values (may change) are: "eu-west-1", "us-east-1"
        /// </summary>
        public readonly string Region;
        /// <summary>
        /// REST Endpoint of the cluster
        /// </summary>
        public readonly string RestEndpoint;
        /// <summary>
        /// Current state of the cluster (active or deleted)
        /// </summary>
        public readonly string State;
        /// <summary>
        /// TCP Endpoint of the cluster
        /// </summary>
        public readonly string TcpEndpoint;
        /// <summary>
        /// Type of the cluster
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Username for the cluster
        /// </summary>
        public readonly string Username;

        [OutputConstructor]
        private GetKafkaClusterResult(
            string clusterId,

            string clusterName,

            int creationTime,

            string id,

            int maxMessageSize,

            int maxMessagesPerSecond,

            int maxPartitions,

            int maxRetentionSize,

            int maxRetentionTime,

            bool multizone,

            string password,

            string region,

            string restEndpoint,

            string state,

            string tcpEndpoint,

            string type,

            string username)
        {
            ClusterId = clusterId;
            ClusterName = clusterName;
            CreationTime = creationTime;
            Id = id;
            MaxMessageSize = maxMessageSize;
            MaxMessagesPerSecond = maxMessagesPerSecond;
            MaxPartitions = maxPartitions;
            MaxRetentionSize = maxRetentionSize;
            MaxRetentionTime = maxRetentionTime;
            Multizone = multizone;
            Password = password;
            Region = region;
            RestEndpoint = restEndpoint;
            State = state;
            TcpEndpoint = tcpEndpoint;
            Type = type;
            Username = username;
        }
    }
}
