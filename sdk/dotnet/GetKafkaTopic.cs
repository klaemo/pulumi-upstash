// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Upstash.Upstash
{
    public static class GetKafkaTopic
    {
        /// <summary>
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Upstash = Pulumi.Upstash;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var kafkaTopicData = Output.Create(Upstash.GetKafkaTopic.InvokeAsync(new Upstash.GetKafkaTopicArgs
        ///         {
        ///             TopicId = resource.Upstash_kafka_topic.ExampleKafkaTopic.Topic_id,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetKafkaTopicResult> InvokeAsync(GetKafkaTopicArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetKafkaTopicResult>("upstash:index/getKafkaTopic:getKafkaTopic", args ?? new GetKafkaTopicArgs(), options.WithDefaults());

        /// <summary>
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Upstash = Pulumi.Upstash;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var kafkaTopicData = Output.Create(Upstash.GetKafkaTopic.InvokeAsync(new Upstash.GetKafkaTopicArgs
        ///         {
        ///             TopicId = resource.Upstash_kafka_topic.ExampleKafkaTopic.Topic_id,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetKafkaTopicResult> Invoke(GetKafkaTopicInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetKafkaTopicResult>("upstash:index/getKafkaTopic:getKafkaTopic", args ?? new GetKafkaTopicInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetKafkaTopicArgs : Pulumi.InvokeArgs
    {
        [Input("topicId", required: true)]
        public string TopicId { get; set; } = null!;

        public GetKafkaTopicArgs()
        {
        }
    }

    public sealed class GetKafkaTopicInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("topicId", required: true)]
        public Input<string> TopicId { get; set; } = null!;

        public GetKafkaTopicInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetKafkaTopicResult
    {
        public readonly string CleanupPolicy;
        public readonly string ClusterId;
        public readonly int CreationTime;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly int MaxMessageSize;
        public readonly bool Multizone;
        public readonly int Partitions;
        public readonly string Password;
        public readonly string Region;
        public readonly string RestEndpoint;
        public readonly int RetentionSize;
        public readonly int RetentionTime;
        public readonly string State;
        public readonly string TcpEndpoint;
        public readonly string TopicId;
        public readonly string TopicName;
        public readonly string Username;

        [OutputConstructor]
        private GetKafkaTopicResult(
            string cleanupPolicy,

            string clusterId,

            int creationTime,

            string id,

            int maxMessageSize,

            bool multizone,

            int partitions,

            string password,

            string region,

            string restEndpoint,

            int retentionSize,

            int retentionTime,

            string state,

            string tcpEndpoint,

            string topicId,

            string topicName,

            string username)
        {
            CleanupPolicy = cleanupPolicy;
            ClusterId = clusterId;
            CreationTime = creationTime;
            Id = id;
            MaxMessageSize = maxMessageSize;
            Multizone = multizone;
            Partitions = partitions;
            Password = password;
            Region = region;
            RestEndpoint = restEndpoint;
            RetentionSize = retentionSize;
            RetentionTime = retentionTime;
            State = state;
            TcpEndpoint = tcpEndpoint;
            TopicId = topicId;
            TopicName = topicName;
            Username = username;
        }
    }
}
