// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Upstash
{
    public static class GetVectorIndex
    {
        public static Task<GetVectorIndexResult> InvokeAsync(GetVectorIndexArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetVectorIndexResult>("upstash:index/getVectorIndex:getVectorIndex", args ?? new GetVectorIndexArgs(), options.WithDefaults());

        public static Output<GetVectorIndexResult> Invoke(GetVectorIndexInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetVectorIndexResult>("upstash:index/getVectorIndex:getVectorIndex", args ?? new GetVectorIndexInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVectorIndexArgs : Pulumi.InvokeArgs
    {
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetVectorIndexArgs()
        {
        }
    }

    public sealed class GetVectorIndexInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetVectorIndexInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetVectorIndexResult
    {
        public readonly int CreationTime;
        public readonly string CustomerId;
        public readonly int DimensionCount;
        public readonly string Endpoint;
        public readonly string Id;
        public readonly int MaxDailyQueries;
        public readonly int MaxDailyUpdates;
        public readonly int MaxMonthlyBandwidth;
        public readonly int MaxQueryPerSecond;
        public readonly int MaxReadsPerRequest;
        public readonly int MaxTotalMetadataSize;
        public readonly int MaxVectorCount;
        public readonly int MaxWritesPerRequest;
        public readonly int MaxWritesPerSecond;
        public readonly string Name;
        public readonly string ReadOnlyToken;
        public readonly string Region;
        public readonly double ReservedPrice;
        public readonly string SimilarityFunction;
        public readonly string Token;
        public readonly string Type;

        [OutputConstructor]
        private GetVectorIndexResult(
            int creationTime,

            string customerId,

            int dimensionCount,

            string endpoint,

            string id,

            int maxDailyQueries,

            int maxDailyUpdates,

            int maxMonthlyBandwidth,

            int maxQueryPerSecond,

            int maxReadsPerRequest,

            int maxTotalMetadataSize,

            int maxVectorCount,

            int maxWritesPerRequest,

            int maxWritesPerSecond,

            string name,

            string readOnlyToken,

            string region,

            double reservedPrice,

            string similarityFunction,

            string token,

            string type)
        {
            CreationTime = creationTime;
            CustomerId = customerId;
            DimensionCount = dimensionCount;
            Endpoint = endpoint;
            Id = id;
            MaxDailyQueries = maxDailyQueries;
            MaxDailyUpdates = maxDailyUpdates;
            MaxMonthlyBandwidth = maxMonthlyBandwidth;
            MaxQueryPerSecond = maxQueryPerSecond;
            MaxReadsPerRequest = maxReadsPerRequest;
            MaxTotalMetadataSize = maxTotalMetadataSize;
            MaxVectorCount = maxVectorCount;
            MaxWritesPerRequest = maxWritesPerRequest;
            MaxWritesPerSecond = maxWritesPerSecond;
            Name = name;
            ReadOnlyToken = readOnlyToken;
            Region = region;
            ReservedPrice = reservedPrice;
            SimilarityFunction = similarityFunction;
            Token = token;
            Type = type;
        }
    }
}
