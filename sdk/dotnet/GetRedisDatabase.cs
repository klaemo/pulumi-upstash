// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Upstash.Upstash
{
    public static class GetRedisDatabase
    {
        /// <summary>
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Upstash = Pulumi.Upstash;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var exampleDBData = Output.Create(Upstash.GetRedisDatabase.InvokeAsync(new Upstash.GetRedisDatabaseArgs
        ///         {
        ///             DatabaseId = resource.Upstash_redis_database.ExampleDB.Database_id,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetRedisDatabaseResult> InvokeAsync(GetRedisDatabaseArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetRedisDatabaseResult>("upstash:index/getRedisDatabase:getRedisDatabase", args ?? new GetRedisDatabaseArgs(), options.WithDefaults());

        /// <summary>
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Upstash = Pulumi.Upstash;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var exampleDBData = Output.Create(Upstash.GetRedisDatabase.InvokeAsync(new Upstash.GetRedisDatabaseArgs
        ///         {
        ///             DatabaseId = resource.Upstash_redis_database.ExampleDB.Database_id,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetRedisDatabaseResult> Invoke(GetRedisDatabaseInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetRedisDatabaseResult>("upstash:index/getRedisDatabase:getRedisDatabase", args ?? new GetRedisDatabaseInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRedisDatabaseArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique Database ID for requested database
        /// </summary>
        [Input("databaseId", required: true)]
        public string DatabaseId { get; set; } = null!;

        public GetRedisDatabaseArgs()
        {
        }
    }

    public sealed class GetRedisDatabaseInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique Database ID for requested database
        /// </summary>
        [Input("databaseId", required: true)]
        public Input<string> DatabaseId { get; set; } = null!;

        public GetRedisDatabaseInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetRedisDatabaseResult
    {
        /// <summary>
        /// When enabled database runs in Consistency Mode
        /// </summary>
        public readonly bool Consistent;
        public readonly int CreationTime;
        /// <summary>
        /// Unique Database ID for requested database
        /// </summary>
        public readonly string DatabaseId;
        /// <summary>
        /// Name of the database
        /// </summary>
        public readonly string DatabaseName;
        public readonly string DatabaseType;
        public readonly int DbDailyBandwidthLimit;
        public readonly int DbDiskThreshold;
        public readonly int DbMaxClients;
        public readonly int DbMaxCommandsPerSecond;
        public readonly int DbMaxEntrySize;
        public readonly int DbMaxRequestSize;
        public readonly int DbMemoryThreshold;
        /// <summary>
        /// Database URL for connection
        /// </summary>
        public readonly string Endpoint;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// When enabled database is highly available and deployed multi-zone
        /// </summary>
        public readonly bool Multizone;
        /// <summary>
        /// Password of the database
        /// </summary>
        public readonly string Password;
        public readonly int Port;
        public readonly string ReadOnlyRestToken;
        /// <summary>
        /// region of the database. Possible values are: "global", "eu-west-1", "us-east-1", "us-west-1", "ap-northeast-1" , "eu-central1"
        /// </summary>
        public readonly string Region;
        public readonly string RestToken;
        public readonly string State;
        /// <summary>
        /// When enabled data is encrypted in transit
        /// </summary>
        public readonly bool Tls;
        public readonly string UserEmail;

        [OutputConstructor]
        private GetRedisDatabaseResult(
            bool consistent,

            int creationTime,

            string databaseId,

            string databaseName,

            string databaseType,

            int dbDailyBandwidthLimit,

            int dbDiskThreshold,

            int dbMaxClients,

            int dbMaxCommandsPerSecond,

            int dbMaxEntrySize,

            int dbMaxRequestSize,

            int dbMemoryThreshold,

            string endpoint,

            string id,

            bool multizone,

            string password,

            int port,

            string readOnlyRestToken,

            string region,

            string restToken,

            string state,

            bool tls,

            string userEmail)
        {
            Consistent = consistent;
            CreationTime = creationTime;
            DatabaseId = databaseId;
            DatabaseName = databaseName;
            DatabaseType = databaseType;
            DbDailyBandwidthLimit = dbDailyBandwidthLimit;
            DbDiskThreshold = dbDiskThreshold;
            DbMaxClients = dbMaxClients;
            DbMaxCommandsPerSecond = dbMaxCommandsPerSecond;
            DbMaxEntrySize = dbMaxEntrySize;
            DbMaxRequestSize = dbMaxRequestSize;
            DbMemoryThreshold = dbMemoryThreshold;
            Endpoint = endpoint;
            Id = id;
            Multizone = multizone;
            Password = password;
            Port = port;
            ReadOnlyRestToken = readOnlyRestToken;
            Region = region;
            RestToken = restToken;
            State = state;
            Tls = tls;
            UserEmail = userEmail;
        }
    }
}
