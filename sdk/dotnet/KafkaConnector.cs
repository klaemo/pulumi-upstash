// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Upstash
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Upstash = Pulumi.Upstash;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         // Not necessary if the topic belongs to an already created cluster.
    ///         var exampleKafkaCluster = new Upstash.KafkaCluster("exampleKafkaCluster", new Upstash.KafkaClusterArgs
    ///         {
    ///             ClusterName = "Terraform_Upstash_Cluster",
    ///             Region = "eu-west-1",
    ///             Multizone = false,
    ///         });
    ///         var exampleKafkaTopic = new Upstash.KafkaTopic("exampleKafkaTopic", new Upstash.KafkaTopicArgs
    ///         {
    ///             TopicName = "TerraformTopic",
    ///             Partitions = 1,
    ///             RetentionTime = 625135,
    ///             RetentionSize = 725124,
    ///             MaxMessageSize = 829213,
    ///             CleanupPolicy = "delete",
    ///             ClusterId = resource.Upstash_kafka_cluster.ExampleKafkaCluster.Cluster_id,
    ///         });
    ///         var exampleKafkaConnector = new Upstash.KafkaConnector("exampleKafkaConnector", new Upstash.KafkaConnectorArgs
    ///         {
    ///             ClusterId = exampleKafkaCluster.ClusterId,
    ///             Properties = 
    ///             {
    ///                 { "collection", "user123" },
    ///                 { "connection.uri", "mongodb+srv://test:test@cluster0.fohyg7p.mongodb.net/?retryWrites=true&amp;w=majority" },
    ///                 { "connector.class", "com.mongodb.kafka.connect.MongoSourceConnector" },
    ///                 { "database", "myshinynewdb2" },
    ///                 { "topics", exampleKafkaTopic.TopicName },
    ///             },
    ///         });
    ///         // OPTIONAL: change between restart-running-paused
    ///         // running_state = "running"
    ///     }
    /// 
    /// }
    /// ```
    /// </summary>
    [UpstashResourceType("upstash:index/kafkaConnector:KafkaConnector")]
    public partial class KafkaConnector : Pulumi.CustomResource
    {
        /// <summary>
        /// Name of the connector
        /// </summary>
        [Output("clusterId")]
        public Output<string> ClusterId { get; private set; } = null!;

        /// <summary>
        /// Unique Connector ID for created connector
        /// </summary>
        [Output("connectorId")]
        public Output<string> ConnectorId { get; private set; } = null!;

        /// <summary>
        /// Creation of the connector
        /// </summary>
        [Output("creationTime")]
        public Output<int> CreationTime { get; private set; } = null!;

        /// <summary>
        /// Name of the connector
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Properties that the connector will have
        /// </summary>
        [Output("properties")]
        public Output<ImmutableDictionary<string, object>> Properties { get; private set; } = null!;

        /// <summary>
        /// Running state of the connector. Can be either 'paused', 'running' or 'restart'
        /// </summary>
        [Output("runningState")]
        public Output<string?> RunningState { get; private set; } = null!;


        /// <summary>
        /// Create a KafkaConnector resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public KafkaConnector(string name, KafkaConnectorArgs args, CustomResourceOptions? options = null)
            : base("upstash:index/kafkaConnector:KafkaConnector", name, args ?? new KafkaConnectorArgs(), MakeResourceOptions(options, ""))
        {
        }

        private KafkaConnector(string name, Input<string> id, KafkaConnectorState? state = null, CustomResourceOptions? options = null)
            : base("upstash:index/kafkaConnector:KafkaConnector", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/upstash/pulumi-upstash",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing KafkaConnector resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static KafkaConnector Get(string name, Input<string> id, KafkaConnectorState? state = null, CustomResourceOptions? options = null)
        {
            return new KafkaConnector(name, id, state, options);
        }
    }

    public sealed class KafkaConnectorArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the connector
        /// </summary>
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        /// <summary>
        /// Name of the connector
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("properties", required: true)]
        private InputMap<object>? _properties;

        /// <summary>
        /// Properties that the connector will have
        /// </summary>
        public InputMap<object> Properties
        {
            get => _properties ?? (_properties = new InputMap<object>());
            set => _properties = value;
        }

        /// <summary>
        /// Running state of the connector. Can be either 'paused', 'running' or 'restart'
        /// </summary>
        [Input("runningState")]
        public Input<string>? RunningState { get; set; }

        public KafkaConnectorArgs()
        {
        }
    }

    public sealed class KafkaConnectorState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the connector
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        /// <summary>
        /// Unique Connector ID for created connector
        /// </summary>
        [Input("connectorId")]
        public Input<string>? ConnectorId { get; set; }

        /// <summary>
        /// Creation of the connector
        /// </summary>
        [Input("creationTime")]
        public Input<int>? CreationTime { get; set; }

        /// <summary>
        /// Name of the connector
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("properties")]
        private InputMap<object>? _properties;

        /// <summary>
        /// Properties that the connector will have
        /// </summary>
        public InputMap<object> Properties
        {
            get => _properties ?? (_properties = new InputMap<object>());
            set => _properties = value;
        }

        /// <summary>
        /// Running state of the connector. Can be either 'paused', 'running' or 'restart'
        /// </summary>
        [Input("runningState")]
        public Input<string>? RunningState { get; set; }

        public KafkaConnectorState()
        {
        }
    }
}
