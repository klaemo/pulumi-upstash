// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Upstash.Upstash
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Upstash = Upstash.Upstash;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var exampleCluster = new Upstash.KafkaCluster("exampleCluster", new Upstash.KafkaClusterArgs
    ///         {
    ///             ClusterName = "TerraformCluster",
    ///             Multizone = false,
    ///             Region = "eu-west-1",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// </summary>
    [UpstashResourceType("upstash:index/kafkaCluster:KafkaCluster")]
    public partial class KafkaCluster : Pulumi.CustomResource
    {
        /// <summary>
        /// Unique Cluster ID for created cluster
        /// </summary>
        [Output("clusterId")]
        public Output<string> ClusterId { get; private set; } = null!;

        /// <summary>
        /// Name of the team
        /// </summary>
        [Output("clusterName")]
        public Output<string> ClusterName { get; private set; } = null!;

        /// <summary>
        /// Creation time of the cluster
        /// </summary>
        [Output("creationTime")]
        public Output<int> CreationTime { get; private set; } = null!;

        /// <summary>
        /// Max Message Size for the cluster
        /// </summary>
        [Output("maxMessageSize")]
        public Output<int> MaxMessageSize { get; private set; } = null!;

        /// <summary>
        /// Max Messages Per Second for the cluster
        /// </summary>
        [Output("maxMessagesPerSecond")]
        public Output<int> MaxMessagesPerSecond { get; private set; } = null!;

        /// <summary>
        /// Max Partitions for the cluster
        /// </summary>
        [Output("maxPartitions")]
        public Output<int> MaxPartitions { get; private set; } = null!;

        /// <summary>
        /// Max Retention Size of the cluster
        /// </summary>
        [Output("maxRetentionSize")]
        public Output<int> MaxRetentionSize { get; private set; } = null!;

        /// <summary>
        /// Max Retention Time of the cluster
        /// </summary>
        [Output("maxRetentionTime")]
        public Output<int> MaxRetentionTime { get; private set; } = null!;

        /// <summary>
        /// Whether cluster has multizone attribute
        /// </summary>
        [Output("multizone")]
        public Output<bool?> Multizone { get; private set; } = null!;

        /// <summary>
        /// Password for the cluster
        /// </summary>
        [Output("password")]
        public Output<string> Password { get; private set; } = null!;

        /// <summary>
        /// region of the cluster. Possible values (may change) are: "eu-west-1", "us-east-1"
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// REST Endpoint of the cluster
        /// </summary>
        [Output("restEndpoint")]
        public Output<string> RestEndpoint { get; private set; } = null!;

        /// <summary>
        /// State, where the cluster is originated
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// TCP Endpoint of the cluster
        /// </summary>
        [Output("tcpEndpoint")]
        public Output<string> TcpEndpoint { get; private set; } = null!;

        /// <summary>
        /// Type of the cluster
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Username for the cluster
        /// </summary>
        [Output("username")]
        public Output<string> Username { get; private set; } = null!;


        /// <summary>
        /// Create a KafkaCluster resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public KafkaCluster(string name, KafkaClusterArgs args, CustomResourceOptions? options = null)
            : base("upstash:index/kafkaCluster:KafkaCluster", name, args ?? new KafkaClusterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private KafkaCluster(string name, Input<string> id, KafkaClusterState? state = null, CustomResourceOptions? options = null)
            : base("upstash:index/kafkaCluster:KafkaCluster", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/upstash/upstash-pulumi-provider/releases/download/v${VERSION}",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing KafkaCluster resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static KafkaCluster Get(string name, Input<string> id, KafkaClusterState? state = null, CustomResourceOptions? options = null)
        {
            return new KafkaCluster(name, id, state, options);
        }
    }

    public sealed class KafkaClusterArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the team
        /// </summary>
        [Input("clusterName", required: true)]
        public Input<string> ClusterName { get; set; } = null!;

        /// <summary>
        /// Whether cluster has multizone attribute
        /// </summary>
        [Input("multizone")]
        public Input<bool>? Multizone { get; set; }

        /// <summary>
        /// region of the cluster. Possible values (may change) are: "eu-west-1", "us-east-1"
        /// </summary>
        [Input("region", required: true)]
        public Input<string> Region { get; set; } = null!;

        public KafkaClusterArgs()
        {
        }
    }

    public sealed class KafkaClusterState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Unique Cluster ID for created cluster
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        /// <summary>
        /// Name of the team
        /// </summary>
        [Input("clusterName")]
        public Input<string>? ClusterName { get; set; }

        /// <summary>
        /// Creation time of the cluster
        /// </summary>
        [Input("creationTime")]
        public Input<int>? CreationTime { get; set; }

        /// <summary>
        /// Max Message Size for the cluster
        /// </summary>
        [Input("maxMessageSize")]
        public Input<int>? MaxMessageSize { get; set; }

        /// <summary>
        /// Max Messages Per Second for the cluster
        /// </summary>
        [Input("maxMessagesPerSecond")]
        public Input<int>? MaxMessagesPerSecond { get; set; }

        /// <summary>
        /// Max Partitions for the cluster
        /// </summary>
        [Input("maxPartitions")]
        public Input<int>? MaxPartitions { get; set; }

        /// <summary>
        /// Max Retention Size of the cluster
        /// </summary>
        [Input("maxRetentionSize")]
        public Input<int>? MaxRetentionSize { get; set; }

        /// <summary>
        /// Max Retention Time of the cluster
        /// </summary>
        [Input("maxRetentionTime")]
        public Input<int>? MaxRetentionTime { get; set; }

        /// <summary>
        /// Whether cluster has multizone attribute
        /// </summary>
        [Input("multizone")]
        public Input<bool>? Multizone { get; set; }

        /// <summary>
        /// Password for the cluster
        /// </summary>
        [Input("password")]
        public Input<string>? Password { get; set; }

        /// <summary>
        /// region of the cluster. Possible values (may change) are: "eu-west-1", "us-east-1"
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// REST Endpoint of the cluster
        /// </summary>
        [Input("restEndpoint")]
        public Input<string>? RestEndpoint { get; set; }

        /// <summary>
        /// State, where the cluster is originated
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// TCP Endpoint of the cluster
        /// </summary>
        [Input("tcpEndpoint")]
        public Input<string>? TcpEndpoint { get; set; }

        /// <summary>
        /// Type of the cluster
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Username for the cluster
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public KafkaClusterState()
        {
        }
    }
}
