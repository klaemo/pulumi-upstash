// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Upstash.Upstash
{
    public static class GetKafkaCredential
    {
        /// <summary>
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Upstash = Pulumi.Upstash;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var kafkaCredentialData = Output.Create(Upstash.GetKafkaCredential.InvokeAsync(new Upstash.GetKafkaCredentialArgs
        ///         {
        ///             CredentialId = upstash_kafka_credential.ExampleKafkaCredential.Credential_id,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetKafkaCredentialResult> InvokeAsync(GetKafkaCredentialArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetKafkaCredentialResult>("upstash:index/getKafkaCredential:getKafkaCredential", args ?? new GetKafkaCredentialArgs(), options.WithDefaults());

        /// <summary>
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Upstash = Pulumi.Upstash;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var kafkaCredentialData = Output.Create(Upstash.GetKafkaCredential.InvokeAsync(new Upstash.GetKafkaCredentialArgs
        ///         {
        ///             CredentialId = upstash_kafka_credential.ExampleKafkaCredential.Credential_id,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetKafkaCredentialResult> Invoke(GetKafkaCredentialInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetKafkaCredentialResult>("upstash:index/getKafkaCredential:getKafkaCredential", args ?? new GetKafkaCredentialInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetKafkaCredentialArgs : Pulumi.InvokeArgs
    {
        [Input("credentialId", required: true)]
        public string CredentialId { get; set; } = null!;

        public GetKafkaCredentialArgs()
        {
        }
    }

    public sealed class GetKafkaCredentialInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("credentialId", required: true)]
        public Input<string> CredentialId { get; set; } = null!;

        public GetKafkaCredentialInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetKafkaCredentialResult
    {
        public readonly string ClusterId;
        public readonly int CreationTime;
        public readonly string CredentialId;
        public readonly string CredentialName;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Password;
        public readonly string Permissions;
        public readonly string State;
        public readonly string Topic;
        public readonly string Username;

        [OutputConstructor]
        private GetKafkaCredentialResult(
            string clusterId,

            int creationTime,

            string credentialId,

            string credentialName,

            string id,

            string password,

            string permissions,

            string state,

            string topic,

            string username)
        {
            ClusterId = clusterId;
            CreationTime = creationTime;
            CredentialId = credentialId;
            CredentialName = credentialName;
            Id = id;
            Password = password;
            Permissions = permissions;
            State = state;
            Topic = topic;
            Username = username;
        }
    }
}
