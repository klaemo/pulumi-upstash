// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class QStashScheduleV2 extends pulumi.CustomResource {
    /**
     * Get an existing QStashScheduleV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: QStashScheduleV2State, opts?: pulumi.CustomResourceOptions): QStashScheduleV2 {
        return new QStashScheduleV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'upstash:index/qStashScheduleV2:QStashScheduleV2';

    /**
     * Returns true if the given object is an instance of QStashScheduleV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is QStashScheduleV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === QStashScheduleV2.__pulumiType;
    }

    /**
     * Body to send for the POST request in string format. Needs escaping (\) double quotes.
     */
    public readonly body!: pulumi.Output<string | undefined>;
    /**
     * Callback URL for Qstash Schedule.
     */
    public readonly callback!: pulumi.Output<string | undefined>;
    /**
     * Content type for Qstash Scheduling.
     */
    public readonly contentType!: pulumi.Output<string | undefined>;
    /**
     * Creation time for Qstash Schedule.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<number>;
    /**
     * Cron string for Qstash Schedule
     */
    public readonly cron!: pulumi.Output<string>;
    /**
     * Delay for Qstash Schedule. Delay should be given in seconds
     */
    public readonly delay!: pulumi.Output<string | undefined>;
    /**
     * Destination for Qstash Schedule. Either Topic Name or valid URL
     */
    public readonly destination!: pulumi.Output<string>;
    /**
     * Forward headers to your API
     */
    public readonly forwardHeaders!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Headers for the QStash schedule
     */
    public /*out*/ readonly header!: pulumi.Output<string>;
    /**
     * Method of Http Request on QStash
     */
    public readonly method!: pulumi.Output<string | undefined>;
    /**
     * Retries for Qstash Schedule requests.
     */
    public readonly retries!: pulumi.Output<number | undefined>;
    /**
     * Unique Qstash Schedule ID for requested schedule
     */
    public /*out*/ readonly scheduleId!: pulumi.Output<string>;

    /**
     * Create a QStashScheduleV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: QStashScheduleV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: QStashScheduleV2Args | QStashScheduleV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as QStashScheduleV2State | undefined;
            resourceInputs["body"] = state ? state.body : undefined;
            resourceInputs["callback"] = state ? state.callback : undefined;
            resourceInputs["contentType"] = state ? state.contentType : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["cron"] = state ? state.cron : undefined;
            resourceInputs["delay"] = state ? state.delay : undefined;
            resourceInputs["destination"] = state ? state.destination : undefined;
            resourceInputs["forwardHeaders"] = state ? state.forwardHeaders : undefined;
            resourceInputs["header"] = state ? state.header : undefined;
            resourceInputs["method"] = state ? state.method : undefined;
            resourceInputs["retries"] = state ? state.retries : undefined;
            resourceInputs["scheduleId"] = state ? state.scheduleId : undefined;
        } else {
            const args = argsOrState as QStashScheduleV2Args | undefined;
            if ((!args || args.cron === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cron'");
            }
            if ((!args || args.destination === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destination'");
            }
            resourceInputs["body"] = args ? args.body : undefined;
            resourceInputs["callback"] = args ? args.callback : undefined;
            resourceInputs["contentType"] = args ? args.contentType : undefined;
            resourceInputs["cron"] = args ? args.cron : undefined;
            resourceInputs["delay"] = args ? args.delay : undefined;
            resourceInputs["destination"] = args ? args.destination : undefined;
            resourceInputs["forwardHeaders"] = args ? args.forwardHeaders : undefined;
            resourceInputs["method"] = args ? args.method : undefined;
            resourceInputs["retries"] = args ? args.retries : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["header"] = undefined /*out*/;
            resourceInputs["scheduleId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(QStashScheduleV2.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering QStashScheduleV2 resources.
 */
export interface QStashScheduleV2State {
    /**
     * Body to send for the POST request in string format. Needs escaping (\) double quotes.
     */
    body?: pulumi.Input<string>;
    /**
     * Callback URL for Qstash Schedule.
     */
    callback?: pulumi.Input<string>;
    /**
     * Content type for Qstash Scheduling.
     */
    contentType?: pulumi.Input<string>;
    /**
     * Creation time for Qstash Schedule.
     */
    createdAt?: pulumi.Input<number>;
    /**
     * Cron string for Qstash Schedule
     */
    cron?: pulumi.Input<string>;
    /**
     * Delay for Qstash Schedule. Delay should be given in seconds
     */
    delay?: pulumi.Input<string>;
    /**
     * Destination for Qstash Schedule. Either Topic Name or valid URL
     */
    destination?: pulumi.Input<string>;
    /**
     * Forward headers to your API
     */
    forwardHeaders?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Headers for the QStash schedule
     */
    header?: pulumi.Input<string>;
    /**
     * Method of Http Request on QStash
     */
    method?: pulumi.Input<string>;
    /**
     * Retries for Qstash Schedule requests.
     */
    retries?: pulumi.Input<number>;
    /**
     * Unique Qstash Schedule ID for requested schedule
     */
    scheduleId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a QStashScheduleV2 resource.
 */
export interface QStashScheduleV2Args {
    /**
     * Body to send for the POST request in string format. Needs escaping (\) double quotes.
     */
    body?: pulumi.Input<string>;
    /**
     * Callback URL for Qstash Schedule.
     */
    callback?: pulumi.Input<string>;
    /**
     * Content type for Qstash Scheduling.
     */
    contentType?: pulumi.Input<string>;
    /**
     * Cron string for Qstash Schedule
     */
    cron: pulumi.Input<string>;
    /**
     * Delay for Qstash Schedule. Delay should be given in seconds
     */
    delay?: pulumi.Input<string>;
    /**
     * Destination for Qstash Schedule. Either Topic Name or valid URL
     */
    destination: pulumi.Input<string>;
    /**
     * Forward headers to your API
     */
    forwardHeaders?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Method of Http Request on QStash
     */
    method?: pulumi.Input<string>;
    /**
     * Retries for Qstash Schedule requests.
     */
    retries?: pulumi.Input<number>;
}
