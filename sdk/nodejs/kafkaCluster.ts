// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as upstash from "@pulumi/upstash";
 *
 * const exampleCluster = new upstash.KafkaCluster("exampleCluster", {
 *     clusterName: "TerraformCluster",
 *     multizone: false,
 *     region: "eu-west-1",
 * });
 * ```
 */
export class KafkaCluster extends pulumi.CustomResource {
    /**
     * Get an existing KafkaCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KafkaClusterState, opts?: pulumi.CustomResourceOptions): KafkaCluster {
        return new KafkaCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'upstash:index/kafkaCluster:KafkaCluster';

    /**
     * Returns true if the given object is an instance of KafkaCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KafkaCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KafkaCluster.__pulumiType;
    }

    /**
     * Unique Cluster ID for created cluster
     */
    public /*out*/ readonly clusterId!: pulumi.Output<string>;
    /**
     * Name of the cluster
     */
    public readonly clusterName!: pulumi.Output<string>;
    /**
     * Creation time of the cluster
     */
    public /*out*/ readonly creationTime!: pulumi.Output<number>;
    /**
     * Max Message Size for the cluster
     */
    public /*out*/ readonly maxMessageSize!: pulumi.Output<number>;
    /**
     * Max Messages Per Second for the cluster
     */
    public /*out*/ readonly maxMessagesPerSecond!: pulumi.Output<number>;
    /**
     * Max Partitions for the cluster
     */
    public /*out*/ readonly maxPartitions!: pulumi.Output<number>;
    /**
     * Max Retention Size of the cluster
     */
    public /*out*/ readonly maxRetentionSize!: pulumi.Output<number>;
    /**
     * Max Retention Time of the cluster
     */
    public /*out*/ readonly maxRetentionTime!: pulumi.Output<number>;
    /**
     * Whether cluster has multizone attribute
     */
    public readonly multizone!: pulumi.Output<boolean | undefined>;
    /**
     * Password for the cluster
     */
    public /*out*/ readonly password!: pulumi.Output<string>;
    /**
     * region of the cluster. Possible values (may change) are: "eu-west-1", "us-east-1"
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * REST Endpoint of the cluster
     */
    public /*out*/ readonly restEndpoint!: pulumi.Output<string>;
    /**
     * State, where the cluster is originated
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * TCP Endpoint of the cluster
     */
    public /*out*/ readonly tcpEndpoint!: pulumi.Output<string>;
    /**
     * Type of the cluster
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * Base64 encoded username for the cluster
     */
    public /*out*/ readonly username!: pulumi.Output<string>;

    /**
     * Create a KafkaCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KafkaClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KafkaClusterArgs | KafkaClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KafkaClusterState | undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["creationTime"] = state ? state.creationTime : undefined;
            resourceInputs["maxMessageSize"] = state ? state.maxMessageSize : undefined;
            resourceInputs["maxMessagesPerSecond"] = state ? state.maxMessagesPerSecond : undefined;
            resourceInputs["maxPartitions"] = state ? state.maxPartitions : undefined;
            resourceInputs["maxRetentionSize"] = state ? state.maxRetentionSize : undefined;
            resourceInputs["maxRetentionTime"] = state ? state.maxRetentionTime : undefined;
            resourceInputs["multizone"] = state ? state.multizone : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["restEndpoint"] = state ? state.restEndpoint : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["tcpEndpoint"] = state ? state.tcpEndpoint : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as KafkaClusterArgs | undefined;
            if ((!args || args.clusterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterName'");
            }
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["multizone"] = args ? args.multizone : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["clusterId"] = undefined /*out*/;
            resourceInputs["creationTime"] = undefined /*out*/;
            resourceInputs["maxMessageSize"] = undefined /*out*/;
            resourceInputs["maxMessagesPerSecond"] = undefined /*out*/;
            resourceInputs["maxPartitions"] = undefined /*out*/;
            resourceInputs["maxRetentionSize"] = undefined /*out*/;
            resourceInputs["maxRetentionTime"] = undefined /*out*/;
            resourceInputs["password"] = undefined /*out*/;
            resourceInputs["restEndpoint"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["tcpEndpoint"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["username"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KafkaCluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering KafkaCluster resources.
 */
export interface KafkaClusterState {
    /**
     * Unique Cluster ID for created cluster
     */
    clusterId?: pulumi.Input<string>;
    /**
     * Name of the cluster
     */
    clusterName?: pulumi.Input<string>;
    /**
     * Creation time of the cluster
     */
    creationTime?: pulumi.Input<number>;
    /**
     * Max Message Size for the cluster
     */
    maxMessageSize?: pulumi.Input<number>;
    /**
     * Max Messages Per Second for the cluster
     */
    maxMessagesPerSecond?: pulumi.Input<number>;
    /**
     * Max Partitions for the cluster
     */
    maxPartitions?: pulumi.Input<number>;
    /**
     * Max Retention Size of the cluster
     */
    maxRetentionSize?: pulumi.Input<number>;
    /**
     * Max Retention Time of the cluster
     */
    maxRetentionTime?: pulumi.Input<number>;
    /**
     * Whether cluster has multizone attribute
     */
    multizone?: pulumi.Input<boolean>;
    /**
     * Password for the cluster
     */
    password?: pulumi.Input<string>;
    /**
     * region of the cluster. Possible values (may change) are: "eu-west-1", "us-east-1"
     */
    region?: pulumi.Input<string>;
    /**
     * REST Endpoint of the cluster
     */
    restEndpoint?: pulumi.Input<string>;
    /**
     * State, where the cluster is originated
     */
    state?: pulumi.Input<string>;
    /**
     * TCP Endpoint of the cluster
     */
    tcpEndpoint?: pulumi.Input<string>;
    /**
     * Type of the cluster
     */
    type?: pulumi.Input<string>;
    /**
     * Base64 encoded username for the cluster
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a KafkaCluster resource.
 */
export interface KafkaClusterArgs {
    /**
     * Name of the cluster
     */
    clusterName: pulumi.Input<string>;
    /**
     * Whether cluster has multizone attribute
     */
    multizone?: pulumi.Input<boolean>;
    /**
     * region of the cluster. Possible values (may change) are: "eu-west-1", "us-east-1"
     */
    region: pulumi.Input<string>;
}
