// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as upstash from "@pulumi/upstash";
 *
 * const clusterData = upstash.getKafkaCluster({
 *     clusterId: resource.upstash_kafka_cluster.exampleCluster.cluster_id,
 * });
 * ```
 */
export function getKafkaCluster(args: GetKafkaClusterArgs, opts?: pulumi.InvokeOptions): Promise<GetKafkaClusterResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("upstash:index/getKafkaCluster:getKafkaCluster", {
        "clusterId": args.clusterId,
    }, opts);
}

/**
 * A collection of arguments for invoking getKafkaCluster.
 */
export interface GetKafkaClusterArgs {
    /**
     * Unique Cluster ID for requested cluster
     */
    clusterId: string;
}

/**
 * A collection of values returned by getKafkaCluster.
 */
export interface GetKafkaClusterResult {
    /**
     * Unique Cluster ID for requested cluster
     */
    readonly clusterId: string;
    /**
     * Name of the team
     */
    readonly clusterName: string;
    readonly creationTime: number;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Max Message Size for the cluster
     */
    readonly maxMessageSize: number;
    /**
     * Max Messages Per Second for the cluster
     */
    readonly maxMessagesPerSecond: number;
    /**
     * Max Partitions for the cluster
     */
    readonly maxPartitions: number;
    /**
     * Max Retention Size of the cluster
     */
    readonly maxRetentionSize: number;
    /**
     * Max Retention Time of the cluster
     */
    readonly maxRetentionTime: number;
    /**
     * Whether multizone replication is enabled
     */
    readonly multizone: boolean;
    /**
     * Password for the cluster
     */
    readonly password: string;
    /**
     * Region of the cluster. Possible values (may change) are: "eu-west-1", "us-east-1"
     */
    readonly region: string;
    /**
     * REST Endpoint of the cluster
     */
    readonly restEndpoint: string;
    /**
     * Current state of the cluster (active or deleted)
     */
    readonly state: string;
    /**
     * TCP Endpoint of the cluster
     */
    readonly tcpEndpoint: string;
    /**
     * Type of the cluster
     */
    readonly type: string;
    /**
     * Username for the cluster
     */
    readonly username: string;
}

export function getKafkaClusterOutput(args: GetKafkaClusterOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetKafkaClusterResult> {
    return pulumi.output(args).apply(a => getKafkaCluster(a, opts))
}

/**
 * A collection of arguments for invoking getKafkaCluster.
 */
export interface GetKafkaClusterOutputArgs {
    /**
     * Unique Cluster ID for requested cluster
     */
    clusterId: pulumi.Input<string>;
}
