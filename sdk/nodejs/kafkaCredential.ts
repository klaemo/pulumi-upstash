// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pulumi from "@upstash/pulumi";
 *
 * const exampleKafkaCluster = new upstash.KafkaCluster("exampleKafkaCluster", {
 *     clusterName: _var.cluster_name,
 *     region: _var.region,
 *     multizone: _var.multizone,
 * });
 * const exampleKafkaTopic = new upstash.KafkaTopic("exampleKafkaTopic", {
 *     topicName: _var.topic_name,
 *     partitions: _var.partitions,
 *     retentionTime: _var.retention_time,
 *     retentionSize: _var.retention_size,
 *     maxMessageSize: _var.max_message_size,
 *     cleanupPolicy: _var.cleanup_policy,
 *     clusterId: resource.upstash_kafka_cluster.exampleKafkaCluster.cluster_id,
 * });
 * const exampleKafkaCredential = new upstash.KafkaCredential("exampleKafkaCredential", {
 *     clusterId: exampleKafkaCluster.clusterId,
 *     credentialName: "credentialFromTerraform",
 *     topic: exampleKafkaTopic.topicName,
 *     permissions: "ALL",
 * });
 * ```
 */
export class KafkaCredential extends pulumi.CustomResource {
    /**
     * Get an existing KafkaCredential resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KafkaCredentialState, opts?: pulumi.CustomResourceOptions): KafkaCredential {
        return new KafkaCredential(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'upstash:index/kafkaCredential:KafkaCredential';

    /**
     * Returns true if the given object is an instance of KafkaCredential.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KafkaCredential {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KafkaCredential.__pulumiType;
    }

    /**
     * ID of the kafka cluster
     */
    public readonly clusterId!: pulumi.Output<string>;
    /**
     * Creation time of the credential
     */
    public /*out*/ readonly creationTime!: pulumi.Output<number>;
    /**
     * Unique ID of the kafka credential
     */
    public /*out*/ readonly credentialId!: pulumi.Output<string>;
    /**
     * Name of the kafka credential
     */
    public readonly credentialName!: pulumi.Output<string>;
    /**
     * Password to be used in authenticating to the cluster
     */
    public /*out*/ readonly password!: pulumi.Output<string>;
    /**
     * Permission scope given to the kafka credential
     */
    public readonly permissions!: pulumi.Output<string>;
    /**
     * State of the credential(active or deleted)
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * Name of the kafka topic
     */
    public readonly topic!: pulumi.Output<string>;
    /**
     * Username to be used for the kafka credential
     */
    public /*out*/ readonly username!: pulumi.Output<string>;

    /**
     * Create a KafkaCredential resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KafkaCredentialArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KafkaCredentialArgs | KafkaCredentialState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KafkaCredentialState | undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["creationTime"] = state ? state.creationTime : undefined;
            resourceInputs["credentialId"] = state ? state.credentialId : undefined;
            resourceInputs["credentialName"] = state ? state.credentialName : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["permissions"] = state ? state.permissions : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["topic"] = state ? state.topic : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as KafkaCredentialArgs | undefined;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if ((!args || args.credentialName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'credentialName'");
            }
            if ((!args || args.permissions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'permissions'");
            }
            if ((!args || args.topic === undefined) && !opts.urn) {
                throw new Error("Missing required property 'topic'");
            }
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["credentialName"] = args ? args.credentialName : undefined;
            resourceInputs["permissions"] = args ? args.permissions : undefined;
            resourceInputs["topic"] = args ? args.topic : undefined;
            resourceInputs["creationTime"] = undefined /*out*/;
            resourceInputs["credentialId"] = undefined /*out*/;
            resourceInputs["password"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["username"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KafkaCredential.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering KafkaCredential resources.
 */
export interface KafkaCredentialState {
    /**
     * ID of the kafka cluster
     */
    clusterId?: pulumi.Input<string>;
    /**
     * Creation time of the credential
     */
    creationTime?: pulumi.Input<number>;
    /**
     * Unique ID of the kafka credential
     */
    credentialId?: pulumi.Input<string>;
    /**
     * Name of the kafka credential
     */
    credentialName?: pulumi.Input<string>;
    /**
     * Password to be used in authenticating to the cluster
     */
    password?: pulumi.Input<string>;
    /**
     * Permission scope given to the kafka credential
     */
    permissions?: pulumi.Input<string>;
    /**
     * State of the credential(active or deleted)
     */
    state?: pulumi.Input<string>;
    /**
     * Name of the kafka topic
     */
    topic?: pulumi.Input<string>;
    /**
     * Username to be used for the kafka credential
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a KafkaCredential resource.
 */
export interface KafkaCredentialArgs {
    /**
     * ID of the kafka cluster
     */
    clusterId: pulumi.Input<string>;
    /**
     * Name of the kafka credential
     */
    credentialName: pulumi.Input<string>;
    /**
     * Permission scope given to the kafka credential
     */
    permissions: pulumi.Input<string>;
    /**
     * Name of the kafka topic
     */
    topic: pulumi.Input<string>;
}
