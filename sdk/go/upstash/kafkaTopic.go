// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package upstash

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/upstash/pulumi-upstash/sdk/go/upstash"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := upstash.NewKafkaCluster(ctx, "exampleKafkaCluster", &upstash.KafkaClusterArgs{
//				ClusterName: pulumi.String("Terraform_Upstash_Cluster"),
//				Region:      pulumi.String("eu-west-1"),
//				Multizone:   pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = upstash.NewKafkaTopic(ctx, "exampleKafkaTopic", &upstash.KafkaTopicArgs{
//				TopicName:      pulumi.String("TerraformTopic"),
//				Partitions:     pulumi.Int(1),
//				RetentionTime:  pulumi.Int(625135),
//				RetentionSize:  pulumi.Int(725124),
//				MaxMessageSize: pulumi.Int(829213),
//				CleanupPolicy:  pulumi.String("delete"),
//				ClusterId:      pulumi.Any(resource.Upstash_kafka_cluster.ExampleKafkaCluster.Cluster_id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type KafkaTopic struct {
	pulumi.CustomResourceState

	// Cleanup policy will be used in the topic(compact or delete)
	CleanupPolicy pulumi.StringOutput `pulumi:"cleanupPolicy"`
	// ID of the cluster the topic will be deployed in
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// Creation time of the topic
	CreationTime pulumi.IntOutput `pulumi:"creationTime"`
	// Max message size in the topic
	MaxMessageSize pulumi.IntOutput `pulumi:"maxMessageSize"`
	// Whether multizone replication is enabled
	Multizone pulumi.BoolOutput `pulumi:"multizone"`
	// The number of partitions the topic will have
	Partitions pulumi.IntOutput `pulumi:"partitions"`
	// Password to be used in authenticating to the cluster
	Password pulumi.StringOutput `pulumi:"password"`
	// Region of the kafka topic
	Region pulumi.StringOutput `pulumi:"region"`
	// REST Endpoint of the kafka topic
	RestEndpoint pulumi.StringOutput `pulumi:"restEndpoint"`
	// Retention size of the messages in the topic
	RetentionSize pulumi.IntOutput `pulumi:"retentionSize"`
	// Retention time of messages in the topic
	RetentionTime pulumi.IntOutput `pulumi:"retentionTime"`
	// State of the kafka topic (active or deleted)
	State pulumi.StringOutput `pulumi:"state"`
	// TCP Endpoint of the kafka topic
	TcpEndpoint pulumi.StringOutput `pulumi:"tcpEndpoint"`
	// Unique Cluster ID for created topic
	TopicId pulumi.StringOutput `pulumi:"topicId"`
	// Name of the topic
	TopicName pulumi.StringOutput `pulumi:"topicName"`
	// Base64 encoded username to be used in authenticating to the cluster
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewKafkaTopic registers a new resource with the given unique name, arguments, and options.
func NewKafkaTopic(ctx *pulumi.Context,
	name string, args *KafkaTopicArgs, opts ...pulumi.ResourceOption) (*KafkaTopic, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CleanupPolicy == nil {
		return nil, errors.New("invalid value for required argument 'CleanupPolicy'")
	}
	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.MaxMessageSize == nil {
		return nil, errors.New("invalid value for required argument 'MaxMessageSize'")
	}
	if args.Partitions == nil {
		return nil, errors.New("invalid value for required argument 'Partitions'")
	}
	if args.RetentionSize == nil {
		return nil, errors.New("invalid value for required argument 'RetentionSize'")
	}
	if args.RetentionTime == nil {
		return nil, errors.New("invalid value for required argument 'RetentionTime'")
	}
	if args.TopicName == nil {
		return nil, errors.New("invalid value for required argument 'TopicName'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource KafkaTopic
	err := ctx.RegisterResource("upstash:index/kafkaTopic:KafkaTopic", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKafkaTopic gets an existing KafkaTopic resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKafkaTopic(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KafkaTopicState, opts ...pulumi.ResourceOption) (*KafkaTopic, error) {
	var resource KafkaTopic
	err := ctx.ReadResource("upstash:index/kafkaTopic:KafkaTopic", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KafkaTopic resources.
type kafkaTopicState struct {
	// Cleanup policy will be used in the topic(compact or delete)
	CleanupPolicy *string `pulumi:"cleanupPolicy"`
	// ID of the cluster the topic will be deployed in
	ClusterId *string `pulumi:"clusterId"`
	// Creation time of the topic
	CreationTime *int `pulumi:"creationTime"`
	// Max message size in the topic
	MaxMessageSize *int `pulumi:"maxMessageSize"`
	// Whether multizone replication is enabled
	Multizone *bool `pulumi:"multizone"`
	// The number of partitions the topic will have
	Partitions *int `pulumi:"partitions"`
	// Password to be used in authenticating to the cluster
	Password *string `pulumi:"password"`
	// Region of the kafka topic
	Region *string `pulumi:"region"`
	// REST Endpoint of the kafka topic
	RestEndpoint *string `pulumi:"restEndpoint"`
	// Retention size of the messages in the topic
	RetentionSize *int `pulumi:"retentionSize"`
	// Retention time of messages in the topic
	RetentionTime *int `pulumi:"retentionTime"`
	// State of the kafka topic (active or deleted)
	State *string `pulumi:"state"`
	// TCP Endpoint of the kafka topic
	TcpEndpoint *string `pulumi:"tcpEndpoint"`
	// Unique Cluster ID for created topic
	TopicId *string `pulumi:"topicId"`
	// Name of the topic
	TopicName *string `pulumi:"topicName"`
	// Base64 encoded username to be used in authenticating to the cluster
	Username *string `pulumi:"username"`
}

type KafkaTopicState struct {
	// Cleanup policy will be used in the topic(compact or delete)
	CleanupPolicy pulumi.StringPtrInput
	// ID of the cluster the topic will be deployed in
	ClusterId pulumi.StringPtrInput
	// Creation time of the topic
	CreationTime pulumi.IntPtrInput
	// Max message size in the topic
	MaxMessageSize pulumi.IntPtrInput
	// Whether multizone replication is enabled
	Multizone pulumi.BoolPtrInput
	// The number of partitions the topic will have
	Partitions pulumi.IntPtrInput
	// Password to be used in authenticating to the cluster
	Password pulumi.StringPtrInput
	// Region of the kafka topic
	Region pulumi.StringPtrInput
	// REST Endpoint of the kafka topic
	RestEndpoint pulumi.StringPtrInput
	// Retention size of the messages in the topic
	RetentionSize pulumi.IntPtrInput
	// Retention time of messages in the topic
	RetentionTime pulumi.IntPtrInput
	// State of the kafka topic (active or deleted)
	State pulumi.StringPtrInput
	// TCP Endpoint of the kafka topic
	TcpEndpoint pulumi.StringPtrInput
	// Unique Cluster ID for created topic
	TopicId pulumi.StringPtrInput
	// Name of the topic
	TopicName pulumi.StringPtrInput
	// Base64 encoded username to be used in authenticating to the cluster
	Username pulumi.StringPtrInput
}

func (KafkaTopicState) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaTopicState)(nil)).Elem()
}

type kafkaTopicArgs struct {
	// Cleanup policy will be used in the topic(compact or delete)
	CleanupPolicy string `pulumi:"cleanupPolicy"`
	// ID of the cluster the topic will be deployed in
	ClusterId string `pulumi:"clusterId"`
	// Max message size in the topic
	MaxMessageSize int `pulumi:"maxMessageSize"`
	// The number of partitions the topic will have
	Partitions int `pulumi:"partitions"`
	// Retention size of the messages in the topic
	RetentionSize int `pulumi:"retentionSize"`
	// Retention time of messages in the topic
	RetentionTime int `pulumi:"retentionTime"`
	// Name of the topic
	TopicName string `pulumi:"topicName"`
}

// The set of arguments for constructing a KafkaTopic resource.
type KafkaTopicArgs struct {
	// Cleanup policy will be used in the topic(compact or delete)
	CleanupPolicy pulumi.StringInput
	// ID of the cluster the topic will be deployed in
	ClusterId pulumi.StringInput
	// Max message size in the topic
	MaxMessageSize pulumi.IntInput
	// The number of partitions the topic will have
	Partitions pulumi.IntInput
	// Retention size of the messages in the topic
	RetentionSize pulumi.IntInput
	// Retention time of messages in the topic
	RetentionTime pulumi.IntInput
	// Name of the topic
	TopicName pulumi.StringInput
}

func (KafkaTopicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaTopicArgs)(nil)).Elem()
}

type KafkaTopicInput interface {
	pulumi.Input

	ToKafkaTopicOutput() KafkaTopicOutput
	ToKafkaTopicOutputWithContext(ctx context.Context) KafkaTopicOutput
}

func (*KafkaTopic) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaTopic)(nil)).Elem()
}

func (i *KafkaTopic) ToKafkaTopicOutput() KafkaTopicOutput {
	return i.ToKafkaTopicOutputWithContext(context.Background())
}

func (i *KafkaTopic) ToKafkaTopicOutputWithContext(ctx context.Context) KafkaTopicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaTopicOutput)
}

// KafkaTopicArrayInput is an input type that accepts KafkaTopicArray and KafkaTopicArrayOutput values.
// You can construct a concrete instance of `KafkaTopicArrayInput` via:
//
//	KafkaTopicArray{ KafkaTopicArgs{...} }
type KafkaTopicArrayInput interface {
	pulumi.Input

	ToKafkaTopicArrayOutput() KafkaTopicArrayOutput
	ToKafkaTopicArrayOutputWithContext(context.Context) KafkaTopicArrayOutput
}

type KafkaTopicArray []KafkaTopicInput

func (KafkaTopicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaTopic)(nil)).Elem()
}

func (i KafkaTopicArray) ToKafkaTopicArrayOutput() KafkaTopicArrayOutput {
	return i.ToKafkaTopicArrayOutputWithContext(context.Background())
}

func (i KafkaTopicArray) ToKafkaTopicArrayOutputWithContext(ctx context.Context) KafkaTopicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaTopicArrayOutput)
}

// KafkaTopicMapInput is an input type that accepts KafkaTopicMap and KafkaTopicMapOutput values.
// You can construct a concrete instance of `KafkaTopicMapInput` via:
//
//	KafkaTopicMap{ "key": KafkaTopicArgs{...} }
type KafkaTopicMapInput interface {
	pulumi.Input

	ToKafkaTopicMapOutput() KafkaTopicMapOutput
	ToKafkaTopicMapOutputWithContext(context.Context) KafkaTopicMapOutput
}

type KafkaTopicMap map[string]KafkaTopicInput

func (KafkaTopicMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaTopic)(nil)).Elem()
}

func (i KafkaTopicMap) ToKafkaTopicMapOutput() KafkaTopicMapOutput {
	return i.ToKafkaTopicMapOutputWithContext(context.Background())
}

func (i KafkaTopicMap) ToKafkaTopicMapOutputWithContext(ctx context.Context) KafkaTopicMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaTopicMapOutput)
}

type KafkaTopicOutput struct{ *pulumi.OutputState }

func (KafkaTopicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaTopic)(nil)).Elem()
}

func (o KafkaTopicOutput) ToKafkaTopicOutput() KafkaTopicOutput {
	return o
}

func (o KafkaTopicOutput) ToKafkaTopicOutputWithContext(ctx context.Context) KafkaTopicOutput {
	return o
}

// Cleanup policy will be used in the topic(compact or delete)
func (o KafkaTopicOutput) CleanupPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaTopic) pulumi.StringOutput { return v.CleanupPolicy }).(pulumi.StringOutput)
}

// ID of the cluster the topic will be deployed in
func (o KafkaTopicOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaTopic) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// Creation time of the topic
func (o KafkaTopicOutput) CreationTime() pulumi.IntOutput {
	return o.ApplyT(func(v *KafkaTopic) pulumi.IntOutput { return v.CreationTime }).(pulumi.IntOutput)
}

// Max message size in the topic
func (o KafkaTopicOutput) MaxMessageSize() pulumi.IntOutput {
	return o.ApplyT(func(v *KafkaTopic) pulumi.IntOutput { return v.MaxMessageSize }).(pulumi.IntOutput)
}

// Whether multizone replication is enabled
func (o KafkaTopicOutput) Multizone() pulumi.BoolOutput {
	return o.ApplyT(func(v *KafkaTopic) pulumi.BoolOutput { return v.Multizone }).(pulumi.BoolOutput)
}

// The number of partitions the topic will have
func (o KafkaTopicOutput) Partitions() pulumi.IntOutput {
	return o.ApplyT(func(v *KafkaTopic) pulumi.IntOutput { return v.Partitions }).(pulumi.IntOutput)
}

// Password to be used in authenticating to the cluster
func (o KafkaTopicOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaTopic) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// Region of the kafka topic
func (o KafkaTopicOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaTopic) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// REST Endpoint of the kafka topic
func (o KafkaTopicOutput) RestEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaTopic) pulumi.StringOutput { return v.RestEndpoint }).(pulumi.StringOutput)
}

// Retention size of the messages in the topic
func (o KafkaTopicOutput) RetentionSize() pulumi.IntOutput {
	return o.ApplyT(func(v *KafkaTopic) pulumi.IntOutput { return v.RetentionSize }).(pulumi.IntOutput)
}

// Retention time of messages in the topic
func (o KafkaTopicOutput) RetentionTime() pulumi.IntOutput {
	return o.ApplyT(func(v *KafkaTopic) pulumi.IntOutput { return v.RetentionTime }).(pulumi.IntOutput)
}

// State of the kafka topic (active or deleted)
func (o KafkaTopicOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaTopic) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// TCP Endpoint of the kafka topic
func (o KafkaTopicOutput) TcpEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaTopic) pulumi.StringOutput { return v.TcpEndpoint }).(pulumi.StringOutput)
}

// Unique Cluster ID for created topic
func (o KafkaTopicOutput) TopicId() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaTopic) pulumi.StringOutput { return v.TopicId }).(pulumi.StringOutput)
}

// Name of the topic
func (o KafkaTopicOutput) TopicName() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaTopic) pulumi.StringOutput { return v.TopicName }).(pulumi.StringOutput)
}

// Base64 encoded username to be used in authenticating to the cluster
func (o KafkaTopicOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaTopic) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

type KafkaTopicArrayOutput struct{ *pulumi.OutputState }

func (KafkaTopicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaTopic)(nil)).Elem()
}

func (o KafkaTopicArrayOutput) ToKafkaTopicArrayOutput() KafkaTopicArrayOutput {
	return o
}

func (o KafkaTopicArrayOutput) ToKafkaTopicArrayOutputWithContext(ctx context.Context) KafkaTopicArrayOutput {
	return o
}

func (o KafkaTopicArrayOutput) Index(i pulumi.IntInput) KafkaTopicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KafkaTopic {
		return vs[0].([]*KafkaTopic)[vs[1].(int)]
	}).(KafkaTopicOutput)
}

type KafkaTopicMapOutput struct{ *pulumi.OutputState }

func (KafkaTopicMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaTopic)(nil)).Elem()
}

func (o KafkaTopicMapOutput) ToKafkaTopicMapOutput() KafkaTopicMapOutput {
	return o
}

func (o KafkaTopicMapOutput) ToKafkaTopicMapOutputWithContext(ctx context.Context) KafkaTopicMapOutput {
	return o
}

func (o KafkaTopicMapOutput) MapIndex(k pulumi.StringInput) KafkaTopicOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KafkaTopic {
		return vs[0].(map[string]*KafkaTopic)[vs[1].(string)]
	}).(KafkaTopicOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaTopicInput)(nil)).Elem(), &KafkaTopic{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaTopicArrayInput)(nil)).Elem(), KafkaTopicArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaTopicMapInput)(nil)).Elem(), KafkaTopicMap{})
	pulumi.RegisterOutputType(KafkaTopicOutput{})
	pulumi.RegisterOutputType(KafkaTopicArrayOutput{})
	pulumi.RegisterOutputType(KafkaTopicMapOutput{})
}
