// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package upstash

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/upstash/pulumi-upstash/sdk/go/upstash"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleKafkaCluster, err := upstash.NewKafkaCluster(ctx, "exampleKafkaCluster", &upstash.KafkaClusterArgs{
//				ClusterName: pulumi.Any(_var.Cluster_name),
//				Region:      pulumi.Any(_var.Region),
//				Multizone:   pulumi.Any(_var.Multizone),
//			})
//			if err != nil {
//				return err
//			}
//			exampleKafkaTopic, err := upstash.NewKafkaTopic(ctx, "exampleKafkaTopic", &upstash.KafkaTopicArgs{
//				TopicName:      pulumi.Any(_var.Topic_name),
//				Partitions:     pulumi.Any(_var.Partitions),
//				RetentionTime:  pulumi.Any(_var.Retention_time),
//				RetentionSize:  pulumi.Any(_var.Retention_size),
//				MaxMessageSize: pulumi.Any(_var.Max_message_size),
//				CleanupPolicy:  pulumi.Any(_var.Cleanup_policy),
//				ClusterId:      pulumi.Any(resource.Upstash_kafka_cluster.ExampleKafkaCluster.Cluster_id),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = upstash.NewKafkaCredential(ctx, "exampleKafkaCredential", &upstash.KafkaCredentialArgs{
//				ClusterId:      exampleKafkaCluster.ClusterId,
//				CredentialName: pulumi.String("credentialFromTerraform"),
//				Topic:          exampleKafkaTopic.TopicName,
//				Permissions:    pulumi.String("ALL"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = upstash.NewKafkaCredential(ctx, "exampleKafkaCredentialAllTopics", &upstash.KafkaCredentialArgs{
//				ClusterId:      exampleKafkaCluster.ClusterId,
//				CredentialName: pulumi.String("credentialFromTerraform"),
//				Topic:          pulumi.String("*"),
//				Permissions:    pulumi.String("ALL"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type KafkaCredential struct {
	pulumi.CustomResourceState

	// ID of the kafka cluster
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// Creation time of the credential
	CreationTime pulumi.IntOutput `pulumi:"creationTime"`
	// Unique ID of the kafka credential
	CredentialId pulumi.StringOutput `pulumi:"credentialId"`
	// Name of the kafka credential
	CredentialName pulumi.StringOutput `pulumi:"credentialName"`
	// Password to be used in authenticating to the cluster
	Password pulumi.StringOutput `pulumi:"password"`
	// Permission scope given to the kafka credential
	Permissions pulumi.StringOutput `pulumi:"permissions"`
	// State of the credential(active or deleted)
	State pulumi.StringOutput `pulumi:"state"`
	// Name of the kafka topic
	Topic pulumi.StringOutput `pulumi:"topic"`
	// Username to be used for the kafka credential
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewKafkaCredential registers a new resource with the given unique name, arguments, and options.
func NewKafkaCredential(ctx *pulumi.Context,
	name string, args *KafkaCredentialArgs, opts ...pulumi.ResourceOption) (*KafkaCredential, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.CredentialName == nil {
		return nil, errors.New("invalid value for required argument 'CredentialName'")
	}
	if args.Permissions == nil {
		return nil, errors.New("invalid value for required argument 'Permissions'")
	}
	if args.Topic == nil {
		return nil, errors.New("invalid value for required argument 'Topic'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource KafkaCredential
	err := ctx.RegisterResource("upstash:index/kafkaCredential:KafkaCredential", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKafkaCredential gets an existing KafkaCredential resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKafkaCredential(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KafkaCredentialState, opts ...pulumi.ResourceOption) (*KafkaCredential, error) {
	var resource KafkaCredential
	err := ctx.ReadResource("upstash:index/kafkaCredential:KafkaCredential", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KafkaCredential resources.
type kafkaCredentialState struct {
	// ID of the kafka cluster
	ClusterId *string `pulumi:"clusterId"`
	// Creation time of the credential
	CreationTime *int `pulumi:"creationTime"`
	// Unique ID of the kafka credential
	CredentialId *string `pulumi:"credentialId"`
	// Name of the kafka credential
	CredentialName *string `pulumi:"credentialName"`
	// Password to be used in authenticating to the cluster
	Password *string `pulumi:"password"`
	// Permission scope given to the kafka credential
	Permissions *string `pulumi:"permissions"`
	// State of the credential(active or deleted)
	State *string `pulumi:"state"`
	// Name of the kafka topic
	Topic *string `pulumi:"topic"`
	// Username to be used for the kafka credential
	Username *string `pulumi:"username"`
}

type KafkaCredentialState struct {
	// ID of the kafka cluster
	ClusterId pulumi.StringPtrInput
	// Creation time of the credential
	CreationTime pulumi.IntPtrInput
	// Unique ID of the kafka credential
	CredentialId pulumi.StringPtrInput
	// Name of the kafka credential
	CredentialName pulumi.StringPtrInput
	// Password to be used in authenticating to the cluster
	Password pulumi.StringPtrInput
	// Permission scope given to the kafka credential
	Permissions pulumi.StringPtrInput
	// State of the credential(active or deleted)
	State pulumi.StringPtrInput
	// Name of the kafka topic
	Topic pulumi.StringPtrInput
	// Username to be used for the kafka credential
	Username pulumi.StringPtrInput
}

func (KafkaCredentialState) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaCredentialState)(nil)).Elem()
}

type kafkaCredentialArgs struct {
	// ID of the kafka cluster
	ClusterId string `pulumi:"clusterId"`
	// Name of the kafka credential
	CredentialName string `pulumi:"credentialName"`
	// Permission scope given to the kafka credential
	Permissions string `pulumi:"permissions"`
	// Name of the kafka topic
	Topic string `pulumi:"topic"`
}

// The set of arguments for constructing a KafkaCredential resource.
type KafkaCredentialArgs struct {
	// ID of the kafka cluster
	ClusterId pulumi.StringInput
	// Name of the kafka credential
	CredentialName pulumi.StringInput
	// Permission scope given to the kafka credential
	Permissions pulumi.StringInput
	// Name of the kafka topic
	Topic pulumi.StringInput
}

func (KafkaCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaCredentialArgs)(nil)).Elem()
}

type KafkaCredentialInput interface {
	pulumi.Input

	ToKafkaCredentialOutput() KafkaCredentialOutput
	ToKafkaCredentialOutputWithContext(ctx context.Context) KafkaCredentialOutput
}

func (*KafkaCredential) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaCredential)(nil)).Elem()
}

func (i *KafkaCredential) ToKafkaCredentialOutput() KafkaCredentialOutput {
	return i.ToKafkaCredentialOutputWithContext(context.Background())
}

func (i *KafkaCredential) ToKafkaCredentialOutputWithContext(ctx context.Context) KafkaCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaCredentialOutput)
}

// KafkaCredentialArrayInput is an input type that accepts KafkaCredentialArray and KafkaCredentialArrayOutput values.
// You can construct a concrete instance of `KafkaCredentialArrayInput` via:
//
//	KafkaCredentialArray{ KafkaCredentialArgs{...} }
type KafkaCredentialArrayInput interface {
	pulumi.Input

	ToKafkaCredentialArrayOutput() KafkaCredentialArrayOutput
	ToKafkaCredentialArrayOutputWithContext(context.Context) KafkaCredentialArrayOutput
}

type KafkaCredentialArray []KafkaCredentialInput

func (KafkaCredentialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaCredential)(nil)).Elem()
}

func (i KafkaCredentialArray) ToKafkaCredentialArrayOutput() KafkaCredentialArrayOutput {
	return i.ToKafkaCredentialArrayOutputWithContext(context.Background())
}

func (i KafkaCredentialArray) ToKafkaCredentialArrayOutputWithContext(ctx context.Context) KafkaCredentialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaCredentialArrayOutput)
}

// KafkaCredentialMapInput is an input type that accepts KafkaCredentialMap and KafkaCredentialMapOutput values.
// You can construct a concrete instance of `KafkaCredentialMapInput` via:
//
//	KafkaCredentialMap{ "key": KafkaCredentialArgs{...} }
type KafkaCredentialMapInput interface {
	pulumi.Input

	ToKafkaCredentialMapOutput() KafkaCredentialMapOutput
	ToKafkaCredentialMapOutputWithContext(context.Context) KafkaCredentialMapOutput
}

type KafkaCredentialMap map[string]KafkaCredentialInput

func (KafkaCredentialMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaCredential)(nil)).Elem()
}

func (i KafkaCredentialMap) ToKafkaCredentialMapOutput() KafkaCredentialMapOutput {
	return i.ToKafkaCredentialMapOutputWithContext(context.Background())
}

func (i KafkaCredentialMap) ToKafkaCredentialMapOutputWithContext(ctx context.Context) KafkaCredentialMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaCredentialMapOutput)
}

type KafkaCredentialOutput struct{ *pulumi.OutputState }

func (KafkaCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaCredential)(nil)).Elem()
}

func (o KafkaCredentialOutput) ToKafkaCredentialOutput() KafkaCredentialOutput {
	return o
}

func (o KafkaCredentialOutput) ToKafkaCredentialOutputWithContext(ctx context.Context) KafkaCredentialOutput {
	return o
}

// ID of the kafka cluster
func (o KafkaCredentialOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaCredential) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// Creation time of the credential
func (o KafkaCredentialOutput) CreationTime() pulumi.IntOutput {
	return o.ApplyT(func(v *KafkaCredential) pulumi.IntOutput { return v.CreationTime }).(pulumi.IntOutput)
}

// Unique ID of the kafka credential
func (o KafkaCredentialOutput) CredentialId() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaCredential) pulumi.StringOutput { return v.CredentialId }).(pulumi.StringOutput)
}

// Name of the kafka credential
func (o KafkaCredentialOutput) CredentialName() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaCredential) pulumi.StringOutput { return v.CredentialName }).(pulumi.StringOutput)
}

// Password to be used in authenticating to the cluster
func (o KafkaCredentialOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaCredential) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// Permission scope given to the kafka credential
func (o KafkaCredentialOutput) Permissions() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaCredential) pulumi.StringOutput { return v.Permissions }).(pulumi.StringOutput)
}

// State of the credential(active or deleted)
func (o KafkaCredentialOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaCredential) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Name of the kafka topic
func (o KafkaCredentialOutput) Topic() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaCredential) pulumi.StringOutput { return v.Topic }).(pulumi.StringOutput)
}

// Username to be used for the kafka credential
func (o KafkaCredentialOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaCredential) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

type KafkaCredentialArrayOutput struct{ *pulumi.OutputState }

func (KafkaCredentialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaCredential)(nil)).Elem()
}

func (o KafkaCredentialArrayOutput) ToKafkaCredentialArrayOutput() KafkaCredentialArrayOutput {
	return o
}

func (o KafkaCredentialArrayOutput) ToKafkaCredentialArrayOutputWithContext(ctx context.Context) KafkaCredentialArrayOutput {
	return o
}

func (o KafkaCredentialArrayOutput) Index(i pulumi.IntInput) KafkaCredentialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KafkaCredential {
		return vs[0].([]*KafkaCredential)[vs[1].(int)]
	}).(KafkaCredentialOutput)
}

type KafkaCredentialMapOutput struct{ *pulumi.OutputState }

func (KafkaCredentialMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaCredential)(nil)).Elem()
}

func (o KafkaCredentialMapOutput) ToKafkaCredentialMapOutput() KafkaCredentialMapOutput {
	return o
}

func (o KafkaCredentialMapOutput) ToKafkaCredentialMapOutputWithContext(ctx context.Context) KafkaCredentialMapOutput {
	return o
}

func (o KafkaCredentialMapOutput) MapIndex(k pulumi.StringInput) KafkaCredentialOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KafkaCredential {
		return vs[0].(map[string]*KafkaCredential)[vs[1].(string)]
	}).(KafkaCredentialOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaCredentialInput)(nil)).Elem(), &KafkaCredential{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaCredentialArrayInput)(nil)).Elem(), KafkaCredentialArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaCredentialMapInput)(nil)).Elem(), KafkaCredentialMap{})
	pulumi.RegisterOutputType(KafkaCredentialOutput{})
	pulumi.RegisterOutputType(KafkaCredentialArrayOutput{})
	pulumi.RegisterOutputType(KafkaCredentialMapOutput{})
}
