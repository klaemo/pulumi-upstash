// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package upstash

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-upstash/sdk/go/upstash"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/upstash/upstash-pulumi-provider/sdk/go/upstash"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := upstash.LookupKafkaTopic(ctx, &GetKafkaTopicArgs{
//				TopicId: resource.Upstash_kafka_topic.ExampleKafkaTopic.Topic_id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupKafkaTopic(ctx *pulumi.Context, args *LookupKafkaTopicArgs, opts ...pulumi.InvokeOption) (*LookupKafkaTopicResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv LookupKafkaTopicResult
	err := ctx.Invoke("upstash:index/getKafkaTopic:getKafkaTopic", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getKafkaTopic.
type LookupKafkaTopicArgs struct {
	TopicId string `pulumi:"topicId"`
}

// A collection of values returned by getKafkaTopic.
type LookupKafkaTopicResult struct {
	CleanupPolicy string `pulumi:"cleanupPolicy"`
	ClusterId     string `pulumi:"clusterId"`
	CreationTime  int    `pulumi:"creationTime"`
	// The provider-assigned unique ID for this managed resource.
	Id             string `pulumi:"id"`
	MaxMessageSize int    `pulumi:"maxMessageSize"`
	Multizone      bool   `pulumi:"multizone"`
	Partitions     int    `pulumi:"partitions"`
	Password       string `pulumi:"password"`
	Region         string `pulumi:"region"`
	RestEndpoint   string `pulumi:"restEndpoint"`
	RetentionSize  int    `pulumi:"retentionSize"`
	RetentionTime  int    `pulumi:"retentionTime"`
	State          string `pulumi:"state"`
	TcpEndpoint    string `pulumi:"tcpEndpoint"`
	TopicId        string `pulumi:"topicId"`
	TopicName      string `pulumi:"topicName"`
	Username       string `pulumi:"username"`
}

func LookupKafkaTopicOutput(ctx *pulumi.Context, args LookupKafkaTopicOutputArgs, opts ...pulumi.InvokeOption) LookupKafkaTopicResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupKafkaTopicResult, error) {
			args := v.(LookupKafkaTopicArgs)
			r, err := LookupKafkaTopic(ctx, &args, opts...)
			var s LookupKafkaTopicResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupKafkaTopicResultOutput)
}

// A collection of arguments for invoking getKafkaTopic.
type LookupKafkaTopicOutputArgs struct {
	TopicId pulumi.StringInput `pulumi:"topicId"`
}

func (LookupKafkaTopicOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupKafkaTopicArgs)(nil)).Elem()
}

// A collection of values returned by getKafkaTopic.
type LookupKafkaTopicResultOutput struct{ *pulumi.OutputState }

func (LookupKafkaTopicResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupKafkaTopicResult)(nil)).Elem()
}

func (o LookupKafkaTopicResultOutput) ToLookupKafkaTopicResultOutput() LookupKafkaTopicResultOutput {
	return o
}

func (o LookupKafkaTopicResultOutput) ToLookupKafkaTopicResultOutputWithContext(ctx context.Context) LookupKafkaTopicResultOutput {
	return o
}

func (o LookupKafkaTopicResultOutput) CleanupPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKafkaTopicResult) string { return v.CleanupPolicy }).(pulumi.StringOutput)
}

func (o LookupKafkaTopicResultOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKafkaTopicResult) string { return v.ClusterId }).(pulumi.StringOutput)
}

func (o LookupKafkaTopicResultOutput) CreationTime() pulumi.IntOutput {
	return o.ApplyT(func(v LookupKafkaTopicResult) int { return v.CreationTime }).(pulumi.IntOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupKafkaTopicResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKafkaTopicResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupKafkaTopicResultOutput) MaxMessageSize() pulumi.IntOutput {
	return o.ApplyT(func(v LookupKafkaTopicResult) int { return v.MaxMessageSize }).(pulumi.IntOutput)
}

func (o LookupKafkaTopicResultOutput) Multizone() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupKafkaTopicResult) bool { return v.Multizone }).(pulumi.BoolOutput)
}

func (o LookupKafkaTopicResultOutput) Partitions() pulumi.IntOutput {
	return o.ApplyT(func(v LookupKafkaTopicResult) int { return v.Partitions }).(pulumi.IntOutput)
}

func (o LookupKafkaTopicResultOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKafkaTopicResult) string { return v.Password }).(pulumi.StringOutput)
}

func (o LookupKafkaTopicResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKafkaTopicResult) string { return v.Region }).(pulumi.StringOutput)
}

func (o LookupKafkaTopicResultOutput) RestEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKafkaTopicResult) string { return v.RestEndpoint }).(pulumi.StringOutput)
}

func (o LookupKafkaTopicResultOutput) RetentionSize() pulumi.IntOutput {
	return o.ApplyT(func(v LookupKafkaTopicResult) int { return v.RetentionSize }).(pulumi.IntOutput)
}

func (o LookupKafkaTopicResultOutput) RetentionTime() pulumi.IntOutput {
	return o.ApplyT(func(v LookupKafkaTopicResult) int { return v.RetentionTime }).(pulumi.IntOutput)
}

func (o LookupKafkaTopicResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKafkaTopicResult) string { return v.State }).(pulumi.StringOutput)
}

func (o LookupKafkaTopicResultOutput) TcpEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKafkaTopicResult) string { return v.TcpEndpoint }).(pulumi.StringOutput)
}

func (o LookupKafkaTopicResultOutput) TopicId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKafkaTopicResult) string { return v.TopicId }).(pulumi.StringOutput)
}

func (o LookupKafkaTopicResultOutput) TopicName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKafkaTopicResult) string { return v.TopicName }).(pulumi.StringOutput)
}

func (o LookupKafkaTopicResultOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKafkaTopicResult) string { return v.Username }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupKafkaTopicResultOutput{})
}
