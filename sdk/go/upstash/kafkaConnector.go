// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package upstash

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/upstash/pulumi-upstash/sdk/go/upstash"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleKafkaCluster, err := upstash.NewKafkaCluster(ctx, "exampleKafkaCluster", &upstash.KafkaClusterArgs{
//				ClusterName: pulumi.String("Terraform_Upstash_Cluster"),
//				Region:      pulumi.String("eu-west-1"),
//				Multizone:   pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			exampleKafkaTopic, err := upstash.NewKafkaTopic(ctx, "exampleKafkaTopic", &upstash.KafkaTopicArgs{
//				TopicName:      pulumi.String("TerraformTopic"),
//				Partitions:     pulumi.Int(1),
//				RetentionTime:  pulumi.Int(625135),
//				RetentionSize:  pulumi.Int(725124),
//				MaxMessageSize: pulumi.Int(829213),
//				CleanupPolicy:  pulumi.String("delete"),
//				ClusterId:      pulumi.Any(resource.Upstash_kafka_cluster.ExampleKafkaCluster.Cluster_id),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = upstash.NewKafkaConnector(ctx, "exampleKafkaConnector", &upstash.KafkaConnectorArgs{
//				ClusterId: exampleKafkaCluster.ClusterId,
//				Properties: pulumi.AnyMap{
//					"collection":      pulumi.Any("user123"),
//					"connection.uri":  pulumi.Any("mongodb+srv://test:test@cluster0.fohyg7p.mongodb.net/?retryWrites=true&w=majority"),
//					"connector.class": pulumi.Any("com.mongodb.kafka.connect.MongoSourceConnector"),
//					"database":        pulumi.Any("myshinynewdb2"),
//					"topics":          exampleKafkaTopic.TopicName,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type KafkaConnector struct {
	pulumi.CustomResourceState

	// Name of the connector
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// Unique Connector ID for created connector
	ConnectorId pulumi.StringOutput `pulumi:"connectorId"`
	// Creation of the connector
	CreationTime pulumi.IntOutput `pulumi:"creationTime"`
	// Name of the connector
	Name pulumi.StringOutput `pulumi:"name"`
	// Properties that the connector will have
	Properties pulumi.MapOutput `pulumi:"properties"`
	// Running state of the connector. Can be either 'paused', 'running' or 'restart'
	RunningState pulumi.StringPtrOutput `pulumi:"runningState"`
}

// NewKafkaConnector registers a new resource with the given unique name, arguments, and options.
func NewKafkaConnector(ctx *pulumi.Context,
	name string, args *KafkaConnectorArgs, opts ...pulumi.ResourceOption) (*KafkaConnector, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.Properties == nil {
		return nil, errors.New("invalid value for required argument 'Properties'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource KafkaConnector
	err := ctx.RegisterResource("upstash:index/kafkaConnector:KafkaConnector", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKafkaConnector gets an existing KafkaConnector resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKafkaConnector(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KafkaConnectorState, opts ...pulumi.ResourceOption) (*KafkaConnector, error) {
	var resource KafkaConnector
	err := ctx.ReadResource("upstash:index/kafkaConnector:KafkaConnector", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KafkaConnector resources.
type kafkaConnectorState struct {
	// Name of the connector
	ClusterId *string `pulumi:"clusterId"`
	// Unique Connector ID for created connector
	ConnectorId *string `pulumi:"connectorId"`
	// Creation of the connector
	CreationTime *int `pulumi:"creationTime"`
	// Name of the connector
	Name *string `pulumi:"name"`
	// Properties that the connector will have
	Properties map[string]interface{} `pulumi:"properties"`
	// Running state of the connector. Can be either 'paused', 'running' or 'restart'
	RunningState *string `pulumi:"runningState"`
}

type KafkaConnectorState struct {
	// Name of the connector
	ClusterId pulumi.StringPtrInput
	// Unique Connector ID for created connector
	ConnectorId pulumi.StringPtrInput
	// Creation of the connector
	CreationTime pulumi.IntPtrInput
	// Name of the connector
	Name pulumi.StringPtrInput
	// Properties that the connector will have
	Properties pulumi.MapInput
	// Running state of the connector. Can be either 'paused', 'running' or 'restart'
	RunningState pulumi.StringPtrInput
}

func (KafkaConnectorState) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaConnectorState)(nil)).Elem()
}

type kafkaConnectorArgs struct {
	// Name of the connector
	ClusterId string `pulumi:"clusterId"`
	// Name of the connector
	Name *string `pulumi:"name"`
	// Properties that the connector will have
	Properties map[string]interface{} `pulumi:"properties"`
	// Running state of the connector. Can be either 'paused', 'running' or 'restart'
	RunningState *string `pulumi:"runningState"`
}

// The set of arguments for constructing a KafkaConnector resource.
type KafkaConnectorArgs struct {
	// Name of the connector
	ClusterId pulumi.StringInput
	// Name of the connector
	Name pulumi.StringPtrInput
	// Properties that the connector will have
	Properties pulumi.MapInput
	// Running state of the connector. Can be either 'paused', 'running' or 'restart'
	RunningState pulumi.StringPtrInput
}

func (KafkaConnectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaConnectorArgs)(nil)).Elem()
}

type KafkaConnectorInput interface {
	pulumi.Input

	ToKafkaConnectorOutput() KafkaConnectorOutput
	ToKafkaConnectorOutputWithContext(ctx context.Context) KafkaConnectorOutput
}

func (*KafkaConnector) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaConnector)(nil)).Elem()
}

func (i *KafkaConnector) ToKafkaConnectorOutput() KafkaConnectorOutput {
	return i.ToKafkaConnectorOutputWithContext(context.Background())
}

func (i *KafkaConnector) ToKafkaConnectorOutputWithContext(ctx context.Context) KafkaConnectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaConnectorOutput)
}

// KafkaConnectorArrayInput is an input type that accepts KafkaConnectorArray and KafkaConnectorArrayOutput values.
// You can construct a concrete instance of `KafkaConnectorArrayInput` via:
//
//	KafkaConnectorArray{ KafkaConnectorArgs{...} }
type KafkaConnectorArrayInput interface {
	pulumi.Input

	ToKafkaConnectorArrayOutput() KafkaConnectorArrayOutput
	ToKafkaConnectorArrayOutputWithContext(context.Context) KafkaConnectorArrayOutput
}

type KafkaConnectorArray []KafkaConnectorInput

func (KafkaConnectorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaConnector)(nil)).Elem()
}

func (i KafkaConnectorArray) ToKafkaConnectorArrayOutput() KafkaConnectorArrayOutput {
	return i.ToKafkaConnectorArrayOutputWithContext(context.Background())
}

func (i KafkaConnectorArray) ToKafkaConnectorArrayOutputWithContext(ctx context.Context) KafkaConnectorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaConnectorArrayOutput)
}

// KafkaConnectorMapInput is an input type that accepts KafkaConnectorMap and KafkaConnectorMapOutput values.
// You can construct a concrete instance of `KafkaConnectorMapInput` via:
//
//	KafkaConnectorMap{ "key": KafkaConnectorArgs{...} }
type KafkaConnectorMapInput interface {
	pulumi.Input

	ToKafkaConnectorMapOutput() KafkaConnectorMapOutput
	ToKafkaConnectorMapOutputWithContext(context.Context) KafkaConnectorMapOutput
}

type KafkaConnectorMap map[string]KafkaConnectorInput

func (KafkaConnectorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaConnector)(nil)).Elem()
}

func (i KafkaConnectorMap) ToKafkaConnectorMapOutput() KafkaConnectorMapOutput {
	return i.ToKafkaConnectorMapOutputWithContext(context.Background())
}

func (i KafkaConnectorMap) ToKafkaConnectorMapOutputWithContext(ctx context.Context) KafkaConnectorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaConnectorMapOutput)
}

type KafkaConnectorOutput struct{ *pulumi.OutputState }

func (KafkaConnectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaConnector)(nil)).Elem()
}

func (o KafkaConnectorOutput) ToKafkaConnectorOutput() KafkaConnectorOutput {
	return o
}

func (o KafkaConnectorOutput) ToKafkaConnectorOutputWithContext(ctx context.Context) KafkaConnectorOutput {
	return o
}

// Name of the connector
func (o KafkaConnectorOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaConnector) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// Unique Connector ID for created connector
func (o KafkaConnectorOutput) ConnectorId() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaConnector) pulumi.StringOutput { return v.ConnectorId }).(pulumi.StringOutput)
}

// Creation of the connector
func (o KafkaConnectorOutput) CreationTime() pulumi.IntOutput {
	return o.ApplyT(func(v *KafkaConnector) pulumi.IntOutput { return v.CreationTime }).(pulumi.IntOutput)
}

// Name of the connector
func (o KafkaConnectorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaConnector) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Properties that the connector will have
func (o KafkaConnectorOutput) Properties() pulumi.MapOutput {
	return o.ApplyT(func(v *KafkaConnector) pulumi.MapOutput { return v.Properties }).(pulumi.MapOutput)
}

// Running state of the connector. Can be either 'paused', 'running' or 'restart'
func (o KafkaConnectorOutput) RunningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaConnector) pulumi.StringPtrOutput { return v.RunningState }).(pulumi.StringPtrOutput)
}

type KafkaConnectorArrayOutput struct{ *pulumi.OutputState }

func (KafkaConnectorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaConnector)(nil)).Elem()
}

func (o KafkaConnectorArrayOutput) ToKafkaConnectorArrayOutput() KafkaConnectorArrayOutput {
	return o
}

func (o KafkaConnectorArrayOutput) ToKafkaConnectorArrayOutputWithContext(ctx context.Context) KafkaConnectorArrayOutput {
	return o
}

func (o KafkaConnectorArrayOutput) Index(i pulumi.IntInput) KafkaConnectorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KafkaConnector {
		return vs[0].([]*KafkaConnector)[vs[1].(int)]
	}).(KafkaConnectorOutput)
}

type KafkaConnectorMapOutput struct{ *pulumi.OutputState }

func (KafkaConnectorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaConnector)(nil)).Elem()
}

func (o KafkaConnectorMapOutput) ToKafkaConnectorMapOutput() KafkaConnectorMapOutput {
	return o
}

func (o KafkaConnectorMapOutput) ToKafkaConnectorMapOutputWithContext(ctx context.Context) KafkaConnectorMapOutput {
	return o
}

func (o KafkaConnectorMapOutput) MapIndex(k pulumi.StringInput) KafkaConnectorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KafkaConnector {
		return vs[0].(map[string]*KafkaConnector)[vs[1].(string)]
	}).(KafkaConnectorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaConnectorInput)(nil)).Elem(), &KafkaConnector{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaConnectorArrayInput)(nil)).Elem(), KafkaConnectorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaConnectorMapInput)(nil)).Elem(), KafkaConnectorMap{})
	pulumi.RegisterOutputType(KafkaConnectorOutput{})
	pulumi.RegisterOutputType(KafkaConnectorArrayOutput{})
	pulumi.RegisterOutputType(KafkaConnectorMapOutput{})
}
